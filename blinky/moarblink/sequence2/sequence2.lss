
sequence2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000834  00000000  00000000  0000011c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000009c  00000000  00000000  00000950  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  000009ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000db  00000000  00000000  00000a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000009e  00000000  00000000  00000ae7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000e5  00000000  00000000  00000b85  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  00000c6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000095  00000000  00000000  00000c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000003b  00000000  00000000  00000d25  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  00000d60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e6 ec       	ldi	r30, 0xC6	; 198
  70:	f0 e0       	ldi	r31, 0x00	; 0
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a0 30       	cpi	r26, 0x00	; 0
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	11 e0       	ldi	r17, 0x01	; 1
  80:	a0 e0       	ldi	r26, 0x00	; 0
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a0 30       	cpi	r26, 0x00	; 0
  8a:	b1 07       	cpc	r27, r17
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  92:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <main>:
#include <util/delay.h>

int main (void)
{
	//set PORTD for output
	DDRD = 0xFF;
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	8a b9       	out	0x0a, r24	; 10
			{
				PORTD = i;
				_delay_loop_2(30000);
			}*/

			for(int i = 128; i >= 1; i >>= 2) //loop right on the leds
  9e:	80 e8       	ldi	r24, 0x80	; 128
  a0:	90 e0       	ldi	r25, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a2:	20 e3       	ldi	r18, 0x30	; 48
  a4:	35 e7       	ldi	r19, 0x75	; 117
			{
				PORTD = i;
  a6:	8b b9       	out	0x0b, r24	; 11
  a8:	f9 01       	movw	r30, r18
  aa:	31 97       	sbiw	r30, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <main+0x10>
			{
				PORTD = i;
				_delay_loop_2(30000);
			}*/

			for(int i = 128; i >= 1; i >>= 2) //loop right on the leds
  ae:	95 95       	asr	r25
  b0:	87 95       	ror	r24
  b2:	95 95       	asr	r25
  b4:	87 95       	ror	r24
  b6:	18 16       	cp	r1, r24
  b8:	19 06       	cpc	r1, r25
  ba:	ac f3       	brlt	.-22     	; 0xa6 <main+0xc>
  bc:	80 e8       	ldi	r24, 0x80	; 128
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	f2 cf       	rjmp	.-28     	; 0xa6 <main+0xc>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
