
sequence4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000834  00000000  00000000  00000138  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000009c  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000ef  00000000  00000000  00000a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000a4  00000000  00000000  00000b17  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000ea  00000000  00000000  00000bbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  00000ca8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000aa  00000000  00000000  00000ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000007e  00000000  00000000  00000d76  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  00000df4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e4 ee       	ldi	r30, 0xE4	; 228
  70:	f0 e0       	ldi	r31, 0x00	; 0
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a0 30       	cpi	r26, 0x00	; 0
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	11 e0       	ldi	r17, 0x01	; 1
  80:	a0 e0       	ldi	r26, 0x00	; 0
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a0 30       	cpi	r26, 0x00	; 0
  8a:	b1 07       	cpc	r27, r17
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  92:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <main>:
int main (void)
{
	int left, right, i;

    //set PORTD for output
	DDRD = 0xFF;
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	8a b9       	out	0x0a, r24	; 10
    
		while(1) {
                
            left = 128;
            right = 1;
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
    //set PORTD for output
	DDRD = 0xFF;
    
		while(1) {
                
            left = 128;
  a2:	40 e8       	ldi	r20, 0x80	; 128
  a4:	50 e0       	ldi	r21, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a6:	60 e5       	ldi	r22, 0x50	; 80
  a8:	73 ec       	ldi	r23, 0xC3	; 195
  aa:	0f c0       	rjmp	.+30     	; 0xca <main+0x30>
  ac:	40 e8       	ldi	r20, 0x80	; 128
  ae:	50 e0       	ldi	r21, 0x00	; 0
            right = 1;
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
            i = 1;

            while(left != 1 && right != 128) {

                i = left + right;
  b4:	9a 01       	movw	r18, r20
  b6:	28 0f       	add	r18, r24
  b8:	39 1f       	adc	r19, r25

                PORTD = i;
  ba:	2b b9       	out	0x0b, r18	; 11
  bc:	fb 01       	movw	r30, r22
  be:	31 97       	sbiw	r30, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <main+0x24>
                _delay_loop_2(50000);

                left >>= 1;
  c2:	55 95       	asr	r21
  c4:	47 95       	ror	r20
                right <<= 1;
  c6:	88 0f       	add	r24, r24
  c8:	99 1f       	adc	r25, r25
                
            left = 128;
            right = 1;
            i = 1;

            while(left != 1 && right != 128) {
  ca:	41 30       	cpi	r20, 0x01	; 1
  cc:	51 05       	cpc	r21, r1
  ce:	71 f3       	breq	.-36     	; 0xac <main+0x12>
  d0:	80 38       	cpi	r24, 0x80	; 128
  d2:	91 05       	cpc	r25, r1
  d4:	79 f7       	brne	.-34     	; 0xb4 <main+0x1a>
	DDRD = 0xFF;
    
		while(1) {
                
            left = 128;
            right = 1;
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
    //set PORTD for output
	DDRD = 0xFF;
    
		while(1) {
                
            left = 128;
  da:	40 e8       	ldi	r20, 0x80	; 128
  dc:	50 e0       	ldi	r21, 0x00	; 0
  de:	f8 cf       	rjmp	.-16     	; 0xd0 <main+0x36>

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>
