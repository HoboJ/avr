   1               		.file	"array.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.global __do_copy_data
   8               		.global __do_clear_bss
   9               		.text
  10               	.Ltext0:
  11               	.global	decode
  13               	decode:
  14               	.LFB5:
  15               		.file 1 "array.c"
   1:array.c       **** /* array.c
   2:array.c       ****  * 
   3:array.c       ****  * T. Hennessy
   4:array.c       ****  *
   5:array.c       ****  * Description: Driving a 7 segment display with PORTD while using
   6:array.c       ****  * PORTB as input
   7:array.c       ****  */
   8:array.c       **** 
   9:array.c       **** #include <avr/io.h>
  10:array.c       **** #include <util/delay.h>
  11:array.c       **** #define F_CPU 1000000UL
  12:array.c       **** 
  13:array.c       **** 
  14:array.c       **** int decode (void);
  15:array.c       **** 
  16:array.c       **** 
  17:array.c       **** int main (void)
  18:array.c       **** {
  19:array.c       ****     int digits[10];
  20:array.c       ****     int rotate, value;
  21:array.c       **** 
  22:array.c       ****     digits[0] = 0xC0;
  23:array.c       ****     digits[1] = 0xF9;
  24:array.c       ****     digits[2] = 0xA4;
  25:array.c       ****     digits[3] = 0xB0;
  26:array.c       ****     digits[4] = 0x99;
  27:array.c       ****     digits[5] = 0x92;
  28:array.c       ****     digits[6] = 0x82;
  29:array.c       ****     digits[7] = 0xF8;
  30:array.c       ****     digits[8] = 0x80;
  31:array.c       ****     digits[9] = 0x98;
  32:array.c       ****     digits[10] = 0xC1;
  33:array.c       ****     
  34:array.c       ****     DDRD = 0xFF; //set PORTD for output
  35:array.c       **** 
  36:array.c       ****     while(1) {
  37:array.c       ****         
  38:array.c       ****         /*rotate = 0;
  39:array.c       **** 
  40:array.c       ****         while(rotate < 10) {
  41:array.c       **** 
  42:array.c       ****             PORTD = ~digits[rotate];
  43:array.c       ****             _delay_ms(1000);
  44:array.c       ****             rotate++;
  45:array.c       ****         }*/
  46:array.c       ****         value = decode(); //figure out which number to display on the leds
  47:array.c       ****         
  48:array.c       ****         PORTD = value;
  49:array.c       ****         
  50:array.c       ****     }
  51:array.c       **** 
  52:array.c       ****     return 0;
  53:array.c       **** }
  54:array.c       **** 
  55:array.c       **** int decode (void)
  56:array.c       **** {
  16               		.loc 1 56 0
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  57:array.c       ****     DDRB = 0x00; //accept input from PORTB
  21               		.loc 1 57 0
  22 0000 14B8      		out 36-0x20,__zero_reg__
  58:array.c       **** 
  59:array.c       ****     int input, value;
  60:array.c       **** 
  61:array.c       ****     input = PINB; //take input from PORTB
  23               		.loc 1 61 0
  24 0002 83B1      		in r24,35-0x20
  25               	.LVL0:
  62:array.c       **** 
  63:array.c       ****     switch (input) {
  26               		.loc 1 63 0
  27 0004 8830      		cpi r24,lo8(8)
  28 0006 01F0      		breq .L6
  29 0008 8930      		cpi r24,lo8(9)
  30 000a 00F4      		brsh .L11
  31 000c 8230      		cpi r24,lo8(2)
  32 000e 01F0      		breq .L13
  33 0010 8430      		cpi r24,lo8(4)
  34 0012 01F0      		breq .L5
  35 0014 8130      		cpi r24,lo8(1)
  36 0016 01F4      		brne .L2
  37 0018 00C0      		rjmp .L14
  38               	.L11:
  39 001a 8032      		cpi r24,lo8(32)
  40 001c 01F0      		breq .L8
  41 001e 8132      		cpi r24,lo8(33)
  42 0020 00F4      		brsh .L12
  43 0022 8031      		cpi r24,lo8(16)
  44 0024 01F4      		brne .L2
  45 0026 00C0      		rjmp .L15
  46               	.L12:
  47 0028 8034      		cpi r24,lo8(64)
  48 002a 01F0      		breq .L9
  49 002c 8038      		cpi r24,lo8(-128)
  50 002e 01F4      		brne .L2
  51 0030 00C0      		rjmp .L16
  52               	.L14:
  64:array.c       ****         case 1:
  65:array.c       ****             value = 0;
  53               		.loc 1 65 0
  54 0032 80E0      		ldi r24,lo8(0)
  55 0034 90E0      		ldi r25,hi8(0)
  56               	.LVL1:
  57 0036 0895      		ret
  58               	.LVL2:
  59               	.L5:
  66:array.c       ****             break;
  67:array.c       ****         case 2:
  68:array.c       ****             value = 1;
  69:array.c       ****             break;
  70:array.c       ****         case 4:
  71:array.c       ****             value = 2;
  60               		.loc 1 71 0
  61 0038 82E0      		ldi r24,lo8(2)
  62 003a 90E0      		ldi r25,hi8(2)
  63               	.LVL3:
  72:array.c       ****             break;
  64               		.loc 1 72 0
  65 003c 0895      		ret
  66               	.LVL4:
  67               	.L6:
  73:array.c       ****         case 8:
  74:array.c       ****             value = 3;
  68               		.loc 1 74 0
  69 003e 83E0      		ldi r24,lo8(3)
  70 0040 90E0      		ldi r25,hi8(3)
  71               	.LVL5:
  75:array.c       ****             break;
  72               		.loc 1 75 0
  73 0042 0895      		ret
  74               	.LVL6:
  75               	.L15:
  76:array.c       ****         case 16:
  77:array.c       ****             value = 4;
  76               		.loc 1 77 0
  77 0044 84E0      		ldi r24,lo8(4)
  78 0046 90E0      		ldi r25,hi8(4)
  79               	.LVL7:
  78:array.c       ****             break;
  80               		.loc 1 78 0
  81 0048 0895      		ret
  82               	.LVL8:
  83               	.L8:
  79:array.c       ****         case 32:
  80:array.c       ****             value = 5;
  84               		.loc 1 80 0
  85 004a 85E0      		ldi r24,lo8(5)
  86 004c 90E0      		ldi r25,hi8(5)
  87               	.LVL9:
  81:array.c       ****             break;
  88               		.loc 1 81 0
  89 004e 0895      		ret
  90               	.LVL10:
  91               	.L9:
  82:array.c       ****         case 64:
  83:array.c       ****             value = 6;
  92               		.loc 1 83 0
  93 0050 86E0      		ldi r24,lo8(6)
  94 0052 90E0      		ldi r25,hi8(6)
  95               	.LVL11:
  84:array.c       ****             break;
  96               		.loc 1 84 0
  97 0054 0895      		ret
  98               	.LVL12:
  99               	.L16:
  85:array.c       ****         case 128:
  86:array.c       ****             value = 7;
 100               		.loc 1 86 0
 101 0056 87E0      		ldi r24,lo8(7)
 102 0058 90E0      		ldi r25,hi8(7)
 103               	.LVL13:
  87:array.c       ****             break;
 104               		.loc 1 87 0
 105 005a 0895      		ret
 106               	.LVL14:
 107               	.L2:
  88:array.c       ****         default:
  89:array.c       ****             value = 10;
 108               		.loc 1 89 0
 109 005c 8AE0      		ldi r24,lo8(10)
 110 005e 90E0      		ldi r25,hi8(10)
 111               	.LVL15:
 112 0060 0895      		ret
 113               	.LVL16:
 114               	.L13:
  68:array.c       ****             value = 1;
 115               		.loc 1 68 0
 116 0062 81E0      		ldi r24,lo8(1)
 117 0064 90E0      		ldi r25,hi8(1)
 118               	.LVL17:
  90:array.c       ****     }
  91:array.c       **** 
  92:array.c       ****     return value;
  93:array.c       **** 
  94:array.c       **** }       
 119               		.loc 1 94 0
 120 0066 0895      		ret
 121               	.LFE5:
 123               		.section	.text.startup,"ax",@progbits
 124               	.global	main
 126               	main:
 127               	.LFB4:
  18:array.c       **** {
 128               		.loc 1 18 0
 129               	/* prologue: function */
 130               	/* frame size = 0 */
 131               	/* stack size = 0 */
 132               	.L__stack_usage = 0
  34:array.c       ****     DDRD = 0xFF; //set PORTD for output
 133               		.loc 1 34 0
 134 0000 8FEF      		ldi r24,lo8(-1)
 135 0002 8AB9      		out 42-0x20,r24
 136               	.L18:
  46:array.c       ****         value = decode(); //figure out which number to display on the leds
 137               		.loc 1 46 0 discriminator 1
 138 0004 0E94 0000 		call decode
  48:array.c       ****         PORTD = value;
 139               		.loc 1 48 0 discriminator 1
 140 0008 8BB9      		out 43-0x20,r24
 141 000a 00C0      		rjmp .L18
 142               	.LFE4:
 178               	.Letext0:
 179               		.file 2 "/usr/lib/gcc/avr/4.6.1/../../../../avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 array.c
     /tmp/cciEyg10.s:2      *ABS*:000000000000003f __SREG__
     /tmp/cciEyg10.s:3      *ABS*:000000000000003e __SP_H__
     /tmp/cciEyg10.s:4      *ABS*:000000000000003d __SP_L__
     /tmp/cciEyg10.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cciEyg10.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cciEyg10.s:13     .text:0000000000000000 decode
     /tmp/cciEyg10.s:126    .text.startup:0000000000000000 main

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
