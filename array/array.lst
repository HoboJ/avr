   1               		.file	"array.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.global __do_copy_data
   8               		.global __do_clear_bss
   9               		.text
  10               	.Ltext0:
  11               	.global	decode
  13               	decode:
  14               	.LFB5:
  15               		.file 1 "array.c"
   1:array.c       **** /* array.c
   2:array.c       ****  * 
   3:array.c       ****  * T. Hennessy
   4:array.c       ****  *
   5:array.c       ****  * Description: Driving a 7 segment display with PORTD while using
   6:array.c       ****  * PORTB as input
   7:array.c       ****  */
   8:array.c       **** 
   9:array.c       **** #include <avr/io.h>
  10:array.c       **** #include <util/delay.h>
  11:array.c       **** 
  12:array.c       **** 
  13:array.c       **** int decode (void);
  14:array.c       **** 
  15:array.c       **** 
  16:array.c       **** int main (void)
  17:array.c       **** {
  18:array.c       ****     int digits[10];
  19:array.c       **** 
  20:array.c       ****     digits[0] = 0xC0;
  21:array.c       ****     digits[1] = 0xF9;
  22:array.c       ****     digits[2] = 0xA4;
  23:array.c       ****     digits[3] = 0xB0;
  24:array.c       ****     digits[4] = 0x99;
  25:array.c       ****     digits[5] = 0x92;
  26:array.c       ****     digits[6] = 0x82;
  27:array.c       ****     digits[7] = 0xF8;
  28:array.c       ****     digits[8] = 0x80;
  29:array.c       ****     digits[9] = 0x98;
  30:array.c       ****     
  31:array.c       ****     DDRD = 0xFF; //set PORTD for output
  32:array.c       ****     DDRB = 0x00; //set PORTB for input
  33:array.c       **** 
  34:array.c       ****     while(1) {
  35:array.c       **** 
  36:array.c       ****         int value = decode(); //figure out which number to display on the leds
  37:array.c       ****         
  38:array.c       ****         if(value != 10) {
  39:array.c       ****             PORTD = digits[value];
  40:array.c       ****             _delay_ms(1000);
  41:array.c       ****         }
  42:array.c       ****         else {
  43:array.c       ****             PORTD = 0xFF;
  44:array.c       ****             _delay_ms(4000);
  45:array.c       ****         }
  46:array.c       ****     }
  47:array.c       **** 
  48:array.c       ****     return 0;
  49:array.c       **** }
  50:array.c       **** 
  51:array.c       **** int decode(void)
  52:array.c       **** {
  16               		.loc 1 52 0
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  53:array.c       ****         
  54:array.c       ****         if(PORTB == 0x01)
  21               		.loc 1 54 0
  22 0000 85B1      		in r24,37-0x20
  23 0002 8130      		cpi r24,lo8(1)
  24 0004 01F0      		breq .L3
  55:array.c       ****            return 0;
  56:array.c       ****         else if(PORTB == 0x02)
  25               		.loc 1 56 0
  26 0006 85B1      		in r24,37-0x20
  27 0008 8230      		cpi r24,lo8(2)
  28 000a 01F0      		breq .L4
  57:array.c       ****             return 1;
  58:array.c       ****         else if(PORTB == 0x04)
  29               		.loc 1 58 0
  30 000c 85B1      		in r24,37-0x20
  31 000e 8430      		cpi r24,lo8(4)
  32 0010 01F0      		breq .L5
  59:array.c       ****             return 2;
  60:array.c       ****         else if(PORTB == 0x08)
  33               		.loc 1 60 0
  34 0012 85B1      		in r24,37-0x20
  35 0014 8830      		cpi r24,lo8(8)
  36 0016 01F0      		breq .L6
  61:array.c       ****             return 3;
  62:array.c       ****         else if(PORTB == 0x10)
  37               		.loc 1 62 0
  38 0018 85B1      		in r24,37-0x20
  39 001a 8031      		cpi r24,lo8(16)
  40 001c 01F0      		breq .L7
  63:array.c       ****             return 4;
  64:array.c       ****         else if(PORTB == 0x20)
  41               		.loc 1 64 0
  42 001e 85B1      		in r24,37-0x20
  43 0020 8032      		cpi r24,lo8(32)
  44 0022 01F0      		breq .L8
  65:array.c       ****             return 5;
  66:array.c       ****         else if(PORTB == 0x40)
  45               		.loc 1 66 0
  46 0024 85B1      		in r24,37-0x20
  47 0026 8034      		cpi r24,lo8(64)
  48 0028 01F0      		breq .L9
  67:array.c       ****             return 6;
  68:array.c       ****         else if(PORTB == 0x80)
  49               		.loc 1 68 0
  50 002a 85B1      		in r24,37-0x20
  51 002c 8038      		cpi r24,lo8(-128)
  52 002e 01F4      		brne .L10
  69:array.c       ****             return 7;
  53               		.loc 1 69 0
  54 0030 87E0      		ldi r24,lo8(7)
  55 0032 90E0      		ldi r25,hi8(7)
  56 0034 0895      		ret
  57               	.L3:
  55:array.c       ****            return 0;
  58               		.loc 1 55 0
  59 0036 80E0      		ldi r24,lo8(0)
  60 0038 90E0      		ldi r25,hi8(0)
  61 003a 0895      		ret
  62               	.L4:
  57:array.c       ****             return 1;
  63               		.loc 1 57 0
  64 003c 81E0      		ldi r24,lo8(1)
  65 003e 90E0      		ldi r25,hi8(1)
  66 0040 0895      		ret
  67               	.L5:
  59:array.c       ****             return 2;
  68               		.loc 1 59 0
  69 0042 82E0      		ldi r24,lo8(2)
  70 0044 90E0      		ldi r25,hi8(2)
  71 0046 0895      		ret
  72               	.L6:
  61:array.c       ****             return 3;
  73               		.loc 1 61 0
  74 0048 83E0      		ldi r24,lo8(3)
  75 004a 90E0      		ldi r25,hi8(3)
  76 004c 0895      		ret
  77               	.L7:
  63:array.c       ****             return 4;
  78               		.loc 1 63 0
  79 004e 84E0      		ldi r24,lo8(4)
  80 0050 90E0      		ldi r25,hi8(4)
  81 0052 0895      		ret
  82               	.L8:
  65:array.c       ****             return 5;
  83               		.loc 1 65 0
  84 0054 85E0      		ldi r24,lo8(5)
  85 0056 90E0      		ldi r25,hi8(5)
  86 0058 0895      		ret
  87               	.L9:
  67:array.c       ****             return 6;
  88               		.loc 1 67 0
  89 005a 86E0      		ldi r24,lo8(6)
  90 005c 90E0      		ldi r25,hi8(6)
  91 005e 0895      		ret
  92               	.L10:
  70:array.c       ****         else
  71:array.c       ****             return 10;
  93               		.loc 1 71 0
  94 0060 8AE0      		ldi r24,lo8(10)
  95 0062 90E0      		ldi r25,hi8(10)
  72:array.c       **** }
  96               		.loc 1 72 0
  97 0064 0895      		ret
  98               	.LFE5:
 100               		.section	.text.startup,"ax",@progbits
 101               	.global	main
 103               	main:
 104               	.LFB4:
  17:array.c       **** {
 105               		.loc 1 17 0
 106 0000 CF93      		push r28
 107               	.LCFI0:
 108 0002 DF93      		push r29
 109               	.LCFI1:
 110 0004 CDB7      		in r28,__SP_L__
 111 0006 DEB7      		in r29,__SP_H__
 112 0008 6497      		sbiw r28,20
 113               	.LCFI2:
 114 000a 0FB6      		in __tmp_reg__,__SREG__
 115 000c F894      		cli
 116 000e DEBF      		out __SP_H__,r29
 117 0010 0FBE      		out __SREG__,__tmp_reg__
 118 0012 CDBF      		out __SP_L__,r28
 119               	/* prologue: function */
 120               	/* frame size = 20 */
 121               	/* stack size = 22 */
 122               	.L__stack_usage = 22
  20:array.c       ****     digits[0] = 0xC0;
 123               		.loc 1 20 0
 124 0014 80EC      		ldi r24,lo8(192)
 125 0016 90E0      		ldi r25,hi8(192)
 126 0018 9A83      		std Y+2,r25
 127 001a 8983      		std Y+1,r24
  21:array.c       ****     digits[1] = 0xF9;
 128               		.loc 1 21 0
 129 001c 89EF      		ldi r24,lo8(249)
 130 001e 90E0      		ldi r25,hi8(249)
 131 0020 9C83      		std Y+4,r25
 132 0022 8B83      		std Y+3,r24
  22:array.c       ****     digits[2] = 0xA4;
 133               		.loc 1 22 0
 134 0024 84EA      		ldi r24,lo8(164)
 135 0026 90E0      		ldi r25,hi8(164)
 136 0028 9E83      		std Y+6,r25
 137 002a 8D83      		std Y+5,r24
  23:array.c       ****     digits[3] = 0xB0;
 138               		.loc 1 23 0
 139 002c 80EB      		ldi r24,lo8(176)
 140 002e 90E0      		ldi r25,hi8(176)
 141 0030 9887      		std Y+8,r25
 142 0032 8F83      		std Y+7,r24
  24:array.c       ****     digits[4] = 0x99;
 143               		.loc 1 24 0
 144 0034 89E9      		ldi r24,lo8(153)
 145 0036 90E0      		ldi r25,hi8(153)
 146 0038 9A87      		std Y+10,r25
 147 003a 8987      		std Y+9,r24
  25:array.c       ****     digits[5] = 0x92;
 148               		.loc 1 25 0
 149 003c 82E9      		ldi r24,lo8(146)
 150 003e 90E0      		ldi r25,hi8(146)
 151 0040 9C87      		std Y+12,r25
 152 0042 8B87      		std Y+11,r24
  26:array.c       ****     digits[6] = 0x82;
 153               		.loc 1 26 0
 154 0044 82E8      		ldi r24,lo8(130)
 155 0046 90E0      		ldi r25,hi8(130)
 156 0048 9E87      		std Y+14,r25
 157 004a 8D87      		std Y+13,r24
  27:array.c       ****     digits[7] = 0xF8;
 158               		.loc 1 27 0
 159 004c 88EF      		ldi r24,lo8(248)
 160 004e 90E0      		ldi r25,hi8(248)
 161 0050 988B      		std Y+16,r25
 162 0052 8F87      		std Y+15,r24
  28:array.c       ****     digits[8] = 0x80;
 163               		.loc 1 28 0
 164 0054 80E8      		ldi r24,lo8(128)
 165 0056 90E0      		ldi r25,hi8(128)
 166 0058 9A8B      		std Y+18,r25
 167 005a 898B      		std Y+17,r24
  29:array.c       ****     digits[9] = 0x98;
 168               		.loc 1 29 0
 169 005c 88E9      		ldi r24,lo8(152)
 170 005e 90E0      		ldi r25,hi8(152)
 171 0060 9C8B      		std Y+20,r25
 172 0062 8B8B      		std Y+19,r24
  31:array.c       ****     DDRD = 0xFF; //set PORTD for output
 173               		.loc 1 31 0
 174 0064 8FEF      		ldi r24,lo8(-1)
 175 0066 8AB9      		out 42-0x20,r24
  32:array.c       ****     DDRB = 0x00; //set PORTB for input
 176               		.loc 1 32 0
 177 0068 14B8      		out 36-0x20,__zero_reg__
 178               	.LBB19:
 179               	.LBB20:
 180               	.LBB21:
 181               	.LBB22:
 182               	.LBB23:
 183               		.file 2 "/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h"
   1:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****    Copyright (c) 2007 Joerg Wunsch
   3:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****    All rights reserved.
   4:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 
   5:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 
   8:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 
  11:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****      the documentation and/or other materials provided with the
  14:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****      distribution.
  15:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 
  16:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****      contributors may be used to endorse or promote products derived
  18:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****      from this software without specific prior written permission.
  19:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 
  20:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 
  32:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** /* $Id: delay_basic.h 2143 2010-06-08 21:19:51Z joerg_wunsch $ */
  33:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 
  34:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** #ifndef _UTIL_DELAY_BASIC_H_
  35:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** #define _UTIL_DELAY_BASIC_H_ 1
  36:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 
  37:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** #include <inttypes.h>
  38:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 
  39:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** #if !defined(__DOXYGEN__)
  40:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** static inline void _delay_loop_1(uint8_t __count) __attribute__((always_inline));
  41:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** static inline void _delay_loop_2(uint16_t __count) __attribute__((always_inline));
  42:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** #endif
  43:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 
  44:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** /** \file */
  45:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** /** \defgroup util_delay_basic <util/delay_basic.h>: Basic busy-wait delay loops
  46:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     \code
  47:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     #include <util/delay_basic.h>
  48:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     \endcode
  49:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 
  50:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     The functions in this header file implement simple delay loops
  51:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     that perform a busy-waiting.  They are typically used to
  52:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     facilitate short delays in the program execution.  They are
  53:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     implemented as count-down loops with a well-known CPU cycle
  54:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     count per loop iteration.  As such, no other processing can
  55:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     occur simultaneously.  It should be kept in mind that the
  56:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     functions described here do not disable interrupts.
  57:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 
  58:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     In general, for long delays, the use of hardware timers is
  59:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     much preferrable, as they free the CPU, and allow for
  60:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     concurrent processing of other events while the timer is
  61:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     running.  However, in particular for very short delays, the
  62:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     overhead of setting up a hardware timer is too much compared
  63:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     to the overall delay time.
  64:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 
  65:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     Two inline functions are provided for the actual delay algorithms.
  66:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 
  67:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** */
  68:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 
  69:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  70:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 
  71:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     Delay loop using an 8-bit counter \c __count, so up to 256
  72:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 256 would have to be passed
  73:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     as 0.)  The loop executes three CPU cycles per iteration, not
  74:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     including the overhead the compiler needs to setup the counter
  75:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     register.
  76:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 
  77:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to 768 microseconds
  78:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     can be achieved.
  79:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** */
  80:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** void
  81:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** _delay_loop_1(uint8_t __count)
  82:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** {
  83:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 	__asm__ volatile (
  84:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 		"1: dec %0" "\n\t"
  85:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 		"brne 1b"
  86:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 		: "=r" (__count)
  87:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 		: "0" (__count)
  88:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 	);
  89:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** }
  90:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 
  91:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  92:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 
  93:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     Delay loop using a 16-bit counter \c __count, so up to 65536
  94:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 65536 would have to be
  95:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     passed as 0.)  The loop executes four CPU cycles per iteration,
  96:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     not including the overhead the compiler requires to setup the
  97:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     counter register pair.
  98:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 
  99:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to about 262.1
 100:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     milliseconds can be achieved.
 101:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****  */
 102:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** void
 103:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** _delay_loop_2(uint16_t __count)
 104:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** {
 105:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 	__asm__ volatile (
 184               		.loc 2 105 0
 185 006a 09E1      		ldi r16,lo8(25)
 186 006c 10E0      		ldi r17,hi8(25)
 187               	.LBE23:
 188               	.LBE22:
 189               	.LBE21:
 190               	.LBE20:
  43:array.c       ****             PORTD = 0xFF;
 191               		.loc 1 43 0
 192 006e FF24      		clr r15
 193 0070 FA94      		dec r15
 194               	.L19:
  36:array.c       ****         int value = decode(); //figure out which number to display on the leds
 195               		.loc 1 36 0
 196 0072 0E94 0000 		call decode
 197               	.LVL0:
  38:array.c       ****         if(value != 10) {
 198               		.loc 1 38 0
 199 0076 8A30      		cpi r24,10
 200 0078 9105      		cpc r25,__zero_reg__
 201 007a 01F0      		breq .L13
  39:array.c       ****             PORTD = digits[value];
 202               		.loc 1 39 0
 203 007c FC01      		movw r30,r24
 204 007e EE0F      		lsl r30
 205 0080 FF1F      		rol r31
 206 0082 81E0      		ldi r24,lo8(1)
 207 0084 90E0      		ldi r25,hi8(1)
 208               	.LVL1:
 209 0086 8C0F      		add r24,r28
 210 0088 9D1F      		adc r25,r29
 211 008a E80F      		add r30,r24
 212 008c F91F      		adc r31,r25
 213 008e 8081      		ld r24,Z
 214 0090 8BB9      		out 43-0x20,r24
 215               	.LVL2:
 216 0092 80E1      		ldi r24,lo8(10000)
 217 0094 97E2      		ldi r25,hi8(10000)
 218               	.LVL3:
 219               	.L14:
 220               	.LBB27:
 221               	.LBB26:
 222               	.LBB25:
 223               	.LBB24:
 224               		.loc 2 105 0
 225 0096 F801      		movw r30,r16
 226               	/* #APP */
 227               	 ;  105 "/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h" 1
 228 0098 3197      		1: sbiw r30,1
 229 009a 01F4      		brne 1b
 230               	 ;  0 "" 2
 231               	.LVL4:
 232               	/* #NOAPP */
 233 009c 0197      		sbiw r24,1
 234               	.LBE24:
 235               	.LBE25:
 236               		.file 3 "/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h"
   1:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 
   6:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 
   9:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 
  12:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****      distribution.
  16:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 
  17:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 
  21:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 
  33:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** /* $Id: delay.h.in 2103 2010-03-17 05:16:10Z joerg_wunsch $ */
  34:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 
  35:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 
  38:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 0
  40:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** #endif
  41:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 
  42:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 
  45:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** /** \file */
  46:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  47:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     \code
  48:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  49:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  50:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     #include <util/delay.h>
  51:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     \endcode
  52:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 
  53:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  54:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  55:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  56:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     used.
  57:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 
  58:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  59:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  60:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  61:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  62:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  63:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  64:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  65:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  66:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 
  67:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  68:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  69:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  70:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  71:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  72:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  73:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  74:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     routines linked into the application.
  75:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 
  76:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  77:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  78:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  79:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 
  80:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** */
  81:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 
  82:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  83:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  84:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  85:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** #endif
  86:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 
  87:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** #ifndef F_CPU
  88:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  89:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  90:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** # define F_CPU 1000000UL
  91:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** #endif
  92:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 
  93:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  94:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  95:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** #endif
  96:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 
  97:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** /**
  98:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****    \ingroup util_delay
  99:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 
 100:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 101:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 
 102:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 103:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 104:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 
 105:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 106:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 
 107:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 108:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 109:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 110:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 111:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 112:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****  */
 113:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** void
 114:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** _delay_ms(double __ms)
 115:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** {
 116:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 	uint16_t __ticks;
 117:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 	double __tmp = ((F_CPU) / 4e3) * __ms;
 118:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__)
 119:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 120:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__tmp);
 121:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** #else
 122:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 	if (__tmp < 1.0)
 123:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 		__ticks = 1;
 124:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 	else if (__tmp > 65535)
 125:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 	{
 126:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 127:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 128:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 		while(__ticks)
 237               		.loc 3 128 0
 238 009e 01F4      		brne .L14
 239 00a0 00C0      		rjmp .L19
 240               	.LVL5:
 241               	.L13:
 242               	.LBE26:
 243               	.LBE27:
  43:array.c       ****             PORTD = 0xFF;
 244               		.loc 1 43 0
 245 00a2 FBB8      		out 43-0x20,r15
 246               	.LVL6:
 247 00a4 80E4      		ldi r24,lo8(-25536)
 248 00a6 9CE9      		ldi r25,hi8(-25536)
 249               	.LVL7:
 250               	.L16:
 251               	.LBB28:
 252               	.LBB29:
 253               	.LBB30:
 254               	.LBB31:
 255               		.loc 2 105 0
 256 00a8 F801      		movw r30,r16
 257               	/* #APP */
 258               	 ;  105 "/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h" 1
 259 00aa 3197      		1: sbiw r30,1
 260 00ac 01F4      		brne 1b
 261               	 ;  0 "" 2
 262               	.LVL8:
 263               	/* #NOAPP */
 264 00ae 0197      		sbiw r24,1
 265               	.LBE31:
 266               	.LBE30:
 267               		.loc 3 128 0
 268 00b0 01F4      		brne .L16
 269 00b2 00C0      		rjmp .L19
 270               	.LBE29:
 271               	.LBE28:
 272               	.LBE19:
 273               	.LFE4:
 326               	.Letext0:
 327               		.file 4 "/usr/lib/gcc/avr/4.6.1/../../../../avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 array.c
     /tmp/cc6QW9Zd.s:2      *ABS*:000000000000003f __SREG__
     /tmp/cc6QW9Zd.s:3      *ABS*:000000000000003e __SP_H__
     /tmp/cc6QW9Zd.s:4      *ABS*:000000000000003d __SP_L__
     /tmp/cc6QW9Zd.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc6QW9Zd.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc6QW9Zd.s:13     .text:0000000000000000 decode
     /tmp/cc6QW9Zd.s:103    .text.startup:0000000000000000 main

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
