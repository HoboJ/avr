
array.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000834  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000009c  00000000  00000000  000009d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000028  00000000  00000000  00000a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000192  00000000  00000000  00000a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000fe  00000000  00000000  00000c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000100  00000000  00000000  00000d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000044  00000000  00000000  00000e2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000cb  00000000  00000000  00000e70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000ad  00000000  00000000  00000f3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  00000fe8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	ee e4       	ldi	r30, 0x4E	; 78
  70:	f1 e0       	ldi	r31, 0x01	; 1
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a0 30       	cpi	r26, 0x00	; 0
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	11 e0       	ldi	r17, 0x01	; 1
  80:	a0 e0       	ldi	r26, 0x00	; 0
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a0 30       	cpi	r26, 0x00	; 0
  8a:	b1 07       	cpc	r27, r17
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  92:	0c 94 a5 00 	jmp	0x14a	; 0x14a <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <decode>:
int decode(void)
{

    int input, value;

    PORTB = input;
  9a:	15 b8       	out	0x05, r1	; 5
            break;
        case 0x80:
            value = 7;
            break;
        default:
            value = 10;
  9c:	8a e0       	ldi	r24, 0x0A	; 10
  9e:	90 e0       	ldi	r25, 0x00	; 0
    }

    return value;

}       
  a0:	08 95       	ret

000000a2 <main>:

int decode (void);


int main (void)
{
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	cd b7       	in	r28, 0x3d	; 61
  a8:	de b7       	in	r29, 0x3e	; 62
  aa:	64 97       	sbiw	r28, 0x14	; 20
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	f8 94       	cli
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	cd bf       	out	0x3d, r28	; 61
    int digits[10];
    int rotate;

    digits[0] = 0xC0;
  b6:	80 ec       	ldi	r24, 0xC0	; 192
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	9a 83       	std	Y+2, r25	; 0x02
  bc:	89 83       	std	Y+1, r24	; 0x01
    digits[1] = 0xF9;
  be:	89 ef       	ldi	r24, 0xF9	; 249
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	9c 83       	std	Y+4, r25	; 0x04
  c4:	8b 83       	std	Y+3, r24	; 0x03
    digits[2] = 0xA4;
  c6:	84 ea       	ldi	r24, 0xA4	; 164
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	9e 83       	std	Y+6, r25	; 0x06
  cc:	8d 83       	std	Y+5, r24	; 0x05
    digits[3] = 0xB0;
  ce:	80 eb       	ldi	r24, 0xB0	; 176
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	98 87       	std	Y+8, r25	; 0x08
  d4:	8f 83       	std	Y+7, r24	; 0x07
    digits[4] = 0x99;
  d6:	89 e9       	ldi	r24, 0x99	; 153
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	9a 87       	std	Y+10, r25	; 0x0a
  dc:	89 87       	std	Y+9, r24	; 0x09
    digits[5] = 0x92;
  de:	82 e9       	ldi	r24, 0x92	; 146
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	9c 87       	std	Y+12, r25	; 0x0c
  e4:	8b 87       	std	Y+11, r24	; 0x0b
    digits[6] = 0x82;
  e6:	82 e8       	ldi	r24, 0x82	; 130
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	9e 87       	std	Y+14, r25	; 0x0e
  ec:	8d 87       	std	Y+13, r24	; 0x0d
    digits[7] = 0xF8;
  ee:	88 ef       	ldi	r24, 0xF8	; 248
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	98 8b       	std	Y+16, r25	; 0x10
  f4:	8f 87       	std	Y+15, r24	; 0x0f
    digits[8] = 0x80;
  f6:	80 e8       	ldi	r24, 0x80	; 128
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	9a 8b       	std	Y+18, r25	; 0x12
  fc:	89 8b       	std	Y+17, r24	; 0x11
    digits[9] = 0x98;
  fe:	88 e9       	ldi	r24, 0x98	; 152
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	9c 8b       	std	Y+20, r25	; 0x14
 104:	8b 8b       	std	Y+19, r24	; 0x13
    
    DDRD = 0xFF; //set PORTD for output
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	8a b9       	out	0x0a, r24	; 10
    DDRB = 0x00; //set PORTB for input
 10a:	14 b8       	out	0x04, r1	; 4

    while(1) {
        
        rotate = 0;
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 110:	49 e1       	ldi	r20, 0x19	; 25
 112:	50 e0       	ldi	r21, 0x00	; 0

        while(rotate < 10) {

            PORTD = ~digits[rotate];
 114:	fc 01       	movw	r30, r24
 116:	ee 0f       	add	r30, r30
 118:	ff 1f       	adc	r31, r31
 11a:	21 e0       	ldi	r18, 0x01	; 1
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	2c 0f       	add	r18, r28
 120:	3d 1f       	adc	r19, r29
 122:	e2 0f       	add	r30, r18
 124:	f3 1f       	adc	r31, r19
 126:	20 81       	ld	r18, Z
 128:	20 95       	com	r18
 12a:	2b b9       	out	0x0b, r18	; 11
 12c:	20 e1       	ldi	r18, 0x10	; 16
 12e:	37 e2       	ldi	r19, 0x27	; 39
 130:	fa 01       	movw	r30, r20
 132:	31 97       	sbiw	r30, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <main+0x90>
 136:	21 50       	subi	r18, 0x01	; 1
 138:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 13a:	d1 f7       	brne	.-12     	; 0x130 <main+0x8e>
            _delay_ms(1000);
            rotate++;
 13c:	01 96       	adiw	r24, 0x01	; 1

    while(1) {
        
        rotate = 0;

        while(rotate < 10) {
 13e:	8a 30       	cpi	r24, 0x0A	; 10
 140:	91 05       	cpc	r25, r1
 142:	44 f3       	brlt	.-48     	; 0x114 <main+0x72>
    DDRD = 0xFF; //set PORTD for output
    DDRB = 0x00; //set PORTB for input

    while(1) {
        
        rotate = 0;
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	e5 cf       	rjmp	.-54     	; 0x114 <main+0x72>

0000014a <_exit>:
 14a:	f8 94       	cli

0000014c <__stop_program>:
 14c:	ff cf       	rjmp	.-2      	; 0x14c <__stop_program>
