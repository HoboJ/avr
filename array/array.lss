
array.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000018e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000834  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000009c  00000000  00000000  00000a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000028  00000000  00000000  00000ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001fb  00000000  00000000  00000adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000115  00000000  00000000  00000cd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000116  00000000  00000000  00000dec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000005c  00000000  00000000  00000f04  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000c4  00000000  00000000  00000f60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000190  00000000  00000000  00001024  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  000011b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	ee e8       	ldi	r30, 0x8E	; 142
  70:	f1 e0       	ldi	r31, 0x01	; 1
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a0 30       	cpi	r26, 0x00	; 0
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	11 e0       	ldi	r17, 0x01	; 1
  80:	a0 e0       	ldi	r26, 0x00	; 0
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a0 30       	cpi	r26, 0x00	; 0
  8a:	b1 07       	cpc	r27, r17
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  92:	0c 94 c5 00 	jmp	0x18a	; 0x18a <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <decode>:
int decode(void)
{

    int input, value;

    PORTB = input;
  9a:	15 b8       	out	0x05, r1	; 5
            break;
        case 0x80:
            value = 7;
            break;
        default:
            value = 10;
  9c:	8a e0       	ldi	r24, 0x0A	; 10
  9e:	90 e0       	ldi	r25, 0x00	; 0
    }

    return value;

}       
  a0:	08 95       	ret

000000a2 <main>:

int decode (void);


int main (void)
{
  a2:	df 92       	push	r13
  a4:	ef 92       	push	r14
  a6:	ff 92       	push	r15
  a8:	0f 93       	push	r16
  aa:	1f 93       	push	r17
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	cd b7       	in	r28, 0x3d	; 61
  b2:	de b7       	in	r29, 0x3e	; 62
  b4:	64 97       	sbiw	r28, 0x14	; 20
  b6:	0f b6       	in	r0, 0x3f	; 63
  b8:	f8 94       	cli
  ba:	de bf       	out	0x3e, r29	; 62
  bc:	0f be       	out	0x3f, r0	; 63
  be:	cd bf       	out	0x3d, r28	; 61
    int digits[10];
    int count = 0;

    digits[0] = 0xC0;
  c0:	80 ec       	ldi	r24, 0xC0	; 192
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	9a 83       	std	Y+2, r25	; 0x02
  c6:	89 83       	std	Y+1, r24	; 0x01
    digits[1] = 0xF9;
  c8:	89 ef       	ldi	r24, 0xF9	; 249
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	9c 83       	std	Y+4, r25	; 0x04
  ce:	8b 83       	std	Y+3, r24	; 0x03
    digits[2] = 0xA4;
  d0:	84 ea       	ldi	r24, 0xA4	; 164
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	9e 83       	std	Y+6, r25	; 0x06
  d6:	8d 83       	std	Y+5, r24	; 0x05
    digits[3] = 0xB0;
  d8:	80 eb       	ldi	r24, 0xB0	; 176
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	98 87       	std	Y+8, r25	; 0x08
  de:	8f 83       	std	Y+7, r24	; 0x07
    digits[4] = 0x99;
  e0:	89 e9       	ldi	r24, 0x99	; 153
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	9a 87       	std	Y+10, r25	; 0x0a
  e6:	89 87       	std	Y+9, r24	; 0x09
    digits[5] = 0x92;
  e8:	82 e9       	ldi	r24, 0x92	; 146
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	9c 87       	std	Y+12, r25	; 0x0c
  ee:	8b 87       	std	Y+11, r24	; 0x0b
    digits[6] = 0x82;
  f0:	82 e8       	ldi	r24, 0x82	; 130
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	9e 87       	std	Y+14, r25	; 0x0e
  f6:	8d 87       	std	Y+13, r24	; 0x0d
    digits[7] = 0xF8;
  f8:	88 ef       	ldi	r24, 0xF8	; 248
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	98 8b       	std	Y+16, r25	; 0x10
  fe:	8f 87       	std	Y+15, r24	; 0x0f
    digits[8] = 0x80;
 100:	80 e8       	ldi	r24, 0x80	; 128
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	9a 8b       	std	Y+18, r25	; 0x12
 106:	89 8b       	std	Y+17, r24	; 0x11
    digits[9] = 0x98;
 108:	88 e9       	ldi	r24, 0x98	; 152
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	9c 8b       	std	Y+20, r25	; 0x14
 10e:	8b 8b       	std	Y+19, r24	; 0x13
    
    DDRD = 0xFF; //set PORTD for output
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	8a b9       	out	0x0a, r24	; 10
    DDRB = 0x00; //set PORTB for input
 114:	14 b8       	out	0x04, r1	; 4
 116:	05 e0       	ldi	r16, 0x05	; 5
 118:	10 e0       	ldi	r17, 0x00	; 0
        if(value != 10) {
            PORTD = digits[value];
            _delay_ms(1000);
        }
        else {
            PORTD = 0xFF;
 11a:	dd 24       	eor	r13, r13
 11c:	da 94       	dec	r13
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 11e:	39 e1       	ldi	r19, 0x19	; 25
 120:	e3 2e       	mov	r14, r19
 122:	f1 2c       	mov	r15, r1
    DDRD = 0xFF; //set PORTD for output
    DDRB = 0x00; //set PORTB for input

    while(count <= 4) {

        int value = decode(); //figure out which number to display on the leds
 124:	0e 94 4d 00 	call	0x9a	; 0x9a <decode>
        
        if(value != 10) {
 128:	8a 30       	cpi	r24, 0x0A	; 10
 12a:	91 05       	cpc	r25, r1
 12c:	99 f0       	breq	.+38     	; 0x154 <main+0xb2>
            PORTD = digits[value];
 12e:	fc 01       	movw	r30, r24
 130:	ee 0f       	add	r30, r30
 132:	ff 1f       	adc	r31, r31
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	8c 0f       	add	r24, r28
 13a:	9d 1f       	adc	r25, r29
 13c:	e8 0f       	add	r30, r24
 13e:	f9 1f       	adc	r31, r25
 140:	80 81       	ld	r24, Z
 142:	8b b9       	out	0x0b, r24	; 11
 144:	80 e1       	ldi	r24, 0x10	; 16
 146:	97 e2       	ldi	r25, 0x27	; 39
 148:	f7 01       	movw	r30, r14
 14a:	31 97       	sbiw	r30, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <main+0xa8>
 14e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 150:	d9 f7       	brne	.-10     	; 0x148 <main+0xa6>
 152:	08 c0       	rjmp	.+16     	; 0x164 <main+0xc2>
            _delay_ms(1000);
        }
        else {
            PORTD = 0xFF;
 154:	db b8       	out	0x0b, r13	; 11
 156:	80 e4       	ldi	r24, 0x40	; 64
 158:	9c e9       	ldi	r25, 0x9C	; 156
 15a:	f7 01       	movw	r30, r14
 15c:	31 97       	sbiw	r30, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <main+0xba>
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	d9 f7       	brne	.-10     	; 0x15a <main+0xb8>
 164:	01 50       	subi	r16, 0x01	; 1
 166:	10 40       	sbci	r17, 0x00	; 0
    digits[9] = 0x98;
    
    DDRD = 0xFF; //set PORTD for output
    DDRB = 0x00; //set PORTB for input

    while(count <= 4) {
 168:	e9 f6       	brne	.-70     	; 0x124 <main+0x82>
        count++;
        
    }

    return 0;
}
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	64 96       	adiw	r28, 0x14	; 20
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	f8 94       	cli
 174:	de bf       	out	0x3e, r29	; 62
 176:	0f be       	out	0x3f, r0	; 63
 178:	cd bf       	out	0x3d, r28	; 61
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	1f 91       	pop	r17
 180:	0f 91       	pop	r16
 182:	ff 90       	pop	r15
 184:	ef 90       	pop	r14
 186:	df 90       	pop	r13
 188:	08 95       	ret

0000018a <_exit>:
 18a:	f8 94       	cli

0000018c <__stop_program>:
 18c:	ff cf       	rjmp	.-2      	; 0x18c <__stop_program>
