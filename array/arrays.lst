   1               		.file	"arrays.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.global __do_copy_data
   8               		.global __do_clear_bss
   9               		.text
  10               	.Ltext0:
  11               	.global	decode
  13               	decode:
  14               	.LFB5:
  15               		.file 1 "arrays.c"
   1:arrays.c      **** /* array.c
   2:arrays.c      ****  * 
   3:arrays.c      ****  * T. Hennessy
   4:arrays.c      ****  *
   5:arrays.c      ****  * Description: Driving a 7 segment display with PORTD while using
   6:arrays.c      ****  * PORTB as input
   7:arrays.c      ****  */
   8:arrays.c      **** 
   9:arrays.c      **** #include <avr/io.h>
  10:arrays.c      **** #include <util/delay.h>
  11:arrays.c      **** #include <stdlib.h>
  12:arrays.c      **** #define F_CPU 1000000UL
  13:arrays.c      **** 
  14:arrays.c      **** 
  15:arrays.c      **** int decode (int *test);
  16:arrays.c      **** 
  17:arrays.c      **** 
  18:arrays.c      **** int main (void)
  19:arrays.c      **** {
  20:arrays.c      ****     int digits[10];
  21:arrays.c      ****     int balls = 0; 
  22:arrays.c      ****     int strikes = 0;
  23:arrays.c      ****     int *test;
  24:arrays.c      **** 
  25:arrays.c      ****     digits[0] = 0xC0;
  26:arrays.c      ****     digits[1] = 0xF9;
  27:arrays.c      ****     digits[2] = 0xA4;
  28:arrays.c      ****     digits[3] = 0xB0;
  29:arrays.c      ****     digits[4] = 0x99;
  30:arrays.c      ****     digits[5] = 0x92;
  31:arrays.c      ****     digits[6] = 0x82;
  32:arrays.c      ****     digits[7] = 0xF8;
  33:arrays.c      ****     digits[8] = 0x80;
  34:arrays.c      ****     digits[9] = 0x98;
  35:arrays.c      ****     digits[10] = 0xC1;
  36:arrays.c      ****     
  37:arrays.c      ****     DDRD = 0x7F; //set PORTD for output
  38:arrays.c      ****     DDRB = 0x7F; //set PORTB for output
  39:arrays.c      **** 
  40:arrays.c      ****     while(1) {
  41:arrays.c      **** 
  42:arrays.c      ****         *test = decode(test); //test to see which button gets pressed
  43:arrays.c      **** 
  44:arrays.c      ****         if(*test == 1) {
  45:arrays.c      ****             balls ++;
  46:arrays.c      ****             PORTB = digits[balls];
  47:arrays.c      ****         }
  48:arrays.c      ****         else if(*test == 2) {
  49:arrays.c      ****             strikes ++;
  50:arrays.c      ****             PORTD = digits[strikes];
  51:arrays.c      ****         }
  52:arrays.c      **** 
  53:arrays.c      ****         if(balls == 4 || strikes == 3) {
  54:arrays.c      ****             balls = 0;
  55:arrays.c      ****             PORTB = digits[balls];
  56:arrays.c      **** 
  57:arrays.c      ****             strikes = 0;
  58:arrays.c      ****             PORTD = digits[strikes];
  59:arrays.c      ****         }
  60:arrays.c      ****         //_delay_ms(2000);
  61:arrays.c      **** 
  62:arrays.c      ****         /*       
  63:arrays.c      ****         rotate = 0;
  64:arrays.c      **** 
  65:arrays.c      ****         while(rotate < 10) {
  66:arrays.c      **** 
  67:arrays.c      ****             PORTD = digits[rotate];
  68:arrays.c      ****             _delay_ms(2000);
  69:arrays.c      ****             rotate++;
  70:arrays.c      ****         }
  71:arrays.c      **** 
  72:arrays.c      ****         rotate = 0;
  73:arrays.c      **** 
  74:arrays.c      ****         while(rotate < 10) {
  75:arrays.c      ****             PORTB = digits[rotate];
  76:arrays.c      ****             _delay_ms(2000);
  77:arrays.c      ****             rotate++;
  78:arrays.c      ****         }
  79:arrays.c      ****         */
  80:arrays.c      ****         
  81:arrays.c      ****     }
  82:arrays.c      **** 
  83:arrays.c      ****     return 0;
  84:arrays.c      **** }
  85:arrays.c      **** 
  86:arrays.c      **** int decode (int *test)
  87:arrays.c      **** {
  16               		.loc 1 87 0
  17               	.LVL0:
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22 0000 FC01      		movw r30,r24
  23               	.LVL1:
  24               	.L4:
  88:arrays.c      ****     int strikeButton;
  89:arrays.c      ****     int ballButton;
  90:arrays.c      **** 
  91:arrays.c      ****     while(1) {
  92:arrays.c      ****         
  93:arrays.c      ****         ballButton = PINB & 0x80;
  94:arrays.c      ****         strikeButton = PIND & 0x80;
  25               		.loc 1 94 0
  26 0002 89B1      		in r24,41-0x20
  27               	.LVL2:
  95:arrays.c      **** 
  96:arrays.c      ****         if(ballButton == 128) {
  28               		.loc 1 96 0
  29 0004 1F9B      		sbis 35-0x20,7
  30 0006 00C0      		rjmp .L2
  97:arrays.c      ****             *test = 1;
  31               		.loc 1 97 0
  32 0008 81E0      		ldi r24,lo8(1)
  33 000a 90E0      		ldi r25,hi8(1)
  34               	.LVL3:
  35 000c 00C0      		rjmp .L6
  36               	.LVL4:
  37               	.L2:
  98:arrays.c      ****             break;
  99:arrays.c      ****         }
 100:arrays.c      ****         else if(strikeButton == 128) {
  38               		.loc 1 100 0
  39 000e 87FF      		sbrs r24,7
  40 0010 00C0      		rjmp .L4
 101:arrays.c      ****             *test = 2;
  41               		.loc 1 101 0
  42 0012 82E0      		ldi r24,lo8(2)
  43 0014 90E0      		ldi r25,hi8(2)
  44               	.LVL5:
  45               	.L6:
  46 0016 9183      		std Z+1,r25
  47 0018 8083      		st Z,r24
 102:arrays.c      ****             break;
 103:arrays.c      ****         }
 104:arrays.c      ****     }
 105:arrays.c      **** 
 106:arrays.c      ****     return *test;
 107:arrays.c      **** 
 108:arrays.c      **** }
  48               		.loc 1 108 0
  49 001a 8081      		ld r24,Z
  50 001c 9181      		ldd r25,Z+1
  51               	/* epilogue start */
  52 001e 0895      		ret
  53               	.LFE5:
  55               		.section	.text.startup,"ax",@progbits
  56               	.global	main
  58               	main:
  59               	.LFB4:
  19:arrays.c      **** {
  60               		.loc 1 19 0
  61 0000 CF93      		push r28
  62               	.LCFI0:
  63 0002 DF93      		push r29
  64               	.LCFI1:
  65 0004 CDB7      		in r28,__SP_L__
  66 0006 DEB7      		in r29,__SP_H__
  67 0008 6497      		sbiw r28,20
  68               	.LCFI2:
  69 000a 0FB6      		in __tmp_reg__,__SREG__
  70 000c F894      		cli
  71 000e DEBF      		out __SP_H__,r29
  72 0010 0FBE      		out __SREG__,__tmp_reg__
  73 0012 CDBF      		out __SP_L__,r28
  74               	/* prologue: function */
  75               	/* frame size = 20 */
  76               	/* stack size = 22 */
  77               	.L__stack_usage = 22
  78               	.LVL6:
  25:arrays.c      ****     digits[0] = 0xC0;
  79               		.loc 1 25 0
  80 0014 80EC      		ldi r24,lo8(192)
  81 0016 90E0      		ldi r25,hi8(192)
  82 0018 9A83      		std Y+2,r25
  83 001a 8983      		std Y+1,r24
  26:arrays.c      ****     digits[1] = 0xF9;
  84               		.loc 1 26 0
  85 001c 89EF      		ldi r24,lo8(249)
  86 001e 90E0      		ldi r25,hi8(249)
  87 0020 9C83      		std Y+4,r25
  88 0022 8B83      		std Y+3,r24
  27:arrays.c      ****     digits[2] = 0xA4;
  89               		.loc 1 27 0
  90 0024 84EA      		ldi r24,lo8(164)
  91 0026 90E0      		ldi r25,hi8(164)
  92 0028 9E83      		std Y+6,r25
  93 002a 8D83      		std Y+5,r24
  28:arrays.c      ****     digits[3] = 0xB0;
  94               		.loc 1 28 0
  95 002c 80EB      		ldi r24,lo8(176)
  96 002e 90E0      		ldi r25,hi8(176)
  97 0030 9887      		std Y+8,r25
  98 0032 8F83      		std Y+7,r24
  29:arrays.c      ****     digits[4] = 0x99;
  99               		.loc 1 29 0
 100 0034 89E9      		ldi r24,lo8(153)
 101 0036 90E0      		ldi r25,hi8(153)
 102 0038 9A87      		std Y+10,r25
 103 003a 8987      		std Y+9,r24
  30:arrays.c      ****     digits[5] = 0x92;
 104               		.loc 1 30 0
 105 003c 82E9      		ldi r24,lo8(146)
 106 003e 90E0      		ldi r25,hi8(146)
 107 0040 9C87      		std Y+12,r25
 108 0042 8B87      		std Y+11,r24
  31:arrays.c      ****     digits[6] = 0x82;
 109               		.loc 1 31 0
 110 0044 82E8      		ldi r24,lo8(130)
 111 0046 90E0      		ldi r25,hi8(130)
 112 0048 9E87      		std Y+14,r25
 113 004a 8D87      		std Y+13,r24
  32:arrays.c      ****     digits[7] = 0xF8;
 114               		.loc 1 32 0
 115 004c 88EF      		ldi r24,lo8(248)
 116 004e 90E0      		ldi r25,hi8(248)
 117 0050 988B      		std Y+16,r25
 118 0052 8F87      		std Y+15,r24
  33:arrays.c      ****     digits[8] = 0x80;
 119               		.loc 1 33 0
 120 0054 80E8      		ldi r24,lo8(128)
 121 0056 90E0      		ldi r25,hi8(128)
 122 0058 9A8B      		std Y+18,r25
 123 005a 898B      		std Y+17,r24
  34:arrays.c      ****     digits[9] = 0x98;
 124               		.loc 1 34 0
 125 005c 88E9      		ldi r24,lo8(152)
 126 005e 90E0      		ldi r25,hi8(152)
 127 0060 9C8B      		std Y+20,r25
 128 0062 8B8B      		std Y+19,r24
  37:arrays.c      ****     DDRD = 0x7F; //set PORTD for output
 129               		.loc 1 37 0
 130 0064 8FE7      		ldi r24,lo8(127)
 131 0066 8AB9      		out 42-0x20,r24
  38:arrays.c      ****     DDRB = 0x7F; //set PORTB for output
 132               		.loc 1 38 0
 133 0068 84B9      		out 36-0x20,r24
 134               	.L16:
  22:arrays.c      ****     int strikes = 0;
 135               		.loc 1 22 0
 136 006a EE24      		clr r14
 137 006c FF24      		clr r15
  21:arrays.c      ****     int balls = 0; 
 138               		.loc 1 21 0
 139 006e CC24      		clr r12
 140 0070 DD24      		clr r13
 141               	.LVL7:
 142               	.L15:
  42:arrays.c      ****         *test = decode(test); //test to see which button gets pressed
 143               		.loc 1 42 0
 144 0072 00E0      		ldi r16,lo8(0)
 145 0074 10E0      		ldi r17,hi8(0)
 146 0076 C801      		movw r24,r16
 147 0078 0E94 0000 		call decode
 148 007c F801      		movw r30,r16
 149 007e 9183      		std Z+1,r25
 150 0080 8083      		st Z,r24
  44:arrays.c      ****         if(*test == 1) {
 151               		.loc 1 44 0
 152 0082 8130      		cpi r24,1
 153 0084 9105      		cpc r25,__zero_reg__
 154 0086 01F4      		brne .L9
  45:arrays.c      ****             balls ++;
 155               		.loc 1 45 0
 156 0088 0894      		sec
 157 008a C11C      		adc r12,__zero_reg__
 158 008c D11C      		adc r13,__zero_reg__
 159               	.LVL8:
  46:arrays.c      ****             PORTB = digits[balls];
 160               		.loc 1 46 0
 161 008e F601      		movw r30,r12
 162 0090 EE0F      		lsl r30
 163 0092 FF1F      		rol r31
 164 0094 81E0      		ldi r24,lo8(1)
 165 0096 90E0      		ldi r25,hi8(1)
 166 0098 8C0F      		add r24,r28
 167 009a 9D1F      		adc r25,r29
 168 009c E80F      		add r30,r24
 169 009e F91F      		adc r31,r25
 170 00a0 8081      		ld r24,Z
 171 00a2 85B9      		out 37-0x20,r24
 172 00a4 00C0      		rjmp .L10
 173               	.L9:
  48:arrays.c      ****         else if(*test == 2) {
 174               		.loc 1 48 0
 175 00a6 8230      		cpi r24,2
 176 00a8 9105      		cpc r25,__zero_reg__
 177 00aa 01F4      		brne .L10
  49:arrays.c      ****             strikes ++;
 178               		.loc 1 49 0
 179 00ac 0894      		sec
 180 00ae E11C      		adc r14,__zero_reg__
 181 00b0 F11C      		adc r15,__zero_reg__
 182               	.LVL9:
  50:arrays.c      ****             PORTD = digits[strikes];
 183               		.loc 1 50 0
 184 00b2 F701      		movw r30,r14
 185 00b4 EE0F      		lsl r30
 186 00b6 FF1F      		rol r31
 187 00b8 81E0      		ldi r24,lo8(1)
 188 00ba 90E0      		ldi r25,hi8(1)
 189 00bc 8C0F      		add r24,r28
 190 00be 9D1F      		adc r25,r29
 191 00c0 E80F      		add r30,r24
 192 00c2 F91F      		adc r31,r25
 193 00c4 8081      		ld r24,Z
 194 00c6 8BB9      		out 43-0x20,r24
 195               	.L10:
  53:arrays.c      ****         if(balls == 4 || strikes == 3) {
 196               		.loc 1 53 0
 197 00c8 94E0      		ldi r25,lo8(4)
 198 00ca C916      		cp r12,r25
 199 00cc D104      		cpc r13,__zero_reg__
 200 00ce 01F0      		breq .L11
  53:arrays.c      ****         if(balls == 4 || strikes == 3) {
 201               		.loc 1 53 0 is_stmt 0 discriminator 1
 202 00d0 E3E0      		ldi r30,lo8(3)
 203 00d2 EE16      		cp r14,r30
 204 00d4 F104      		cpc r15,__zero_reg__
 205 00d6 01F4      		brne .L15
 206               	.L11:
 207               	.LVL10:
  55:arrays.c      ****             PORTB = digits[balls];
 208               		.loc 1 55 0 is_stmt 1
 209 00d8 8981      		ldd r24,Y+1
 210 00da 85B9      		out 37-0x20,r24
 211               	.LVL11:
  58:arrays.c      ****             PORTD = digits[strikes];
 212               		.loc 1 58 0
 213 00dc 8981      		ldd r24,Y+1
 214 00de 8BB9      		out 43-0x20,r24
 215 00e0 00C0      		rjmp .L16
 216               	.LFE4:
 269               	.Letext0:
 270               		.file 2 "/usr/lib/gcc/avr/4.6.1/../../../../avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 arrays.c
     /tmp/ccENhNnm.s:2      *ABS*:000000000000003f __SREG__
     /tmp/ccENhNnm.s:3      *ABS*:000000000000003e __SP_H__
     /tmp/ccENhNnm.s:4      *ABS*:000000000000003d __SP_L__
     /tmp/ccENhNnm.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccENhNnm.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccENhNnm.s:13     .text:0000000000000000 decode
     /tmp/ccENhNnm.s:58     .text.startup:0000000000000000 main

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
