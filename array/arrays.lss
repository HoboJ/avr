
arrays.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000834  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000009c  00000000  00000000  00000a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000028  00000000  00000000  00000ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000122  00000000  00000000  00000aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000be  00000000  00000000  00000c0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000ac  00000000  00000000  00000ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000044  00000000  00000000  00000d78  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000a1  00000000  00000000  00000dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000f3  00000000  00000000  00000e5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00000f50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e0 ea       	ldi	r30, 0xA0	; 160
  70:	f1 e0       	ldi	r31, 0x01	; 1
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a0 30       	cpi	r26, 0x00	; 0
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	11 e0       	ldi	r17, 0x01	; 1
  80:	a0 e0       	ldi	r26, 0x00	; 0
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a0 30       	cpi	r26, 0x00	; 0
  8a:	b1 07       	cpc	r27, r17
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 5d 00 	call	0xba	; 0xba <main>
  92:	0c 94 ce 00 	jmp	0x19c	; 0x19c <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <decode>:

    return 0;
}

int decode (int *test)
{
  9a:	fc 01       	movw	r30, r24
    int ballButton;

    while(1) {
        
        ballButton = PINB & 0x80;
        strikeButton = PIND & 0x80;
  9c:	89 b1       	in	r24, 0x09	; 9

        if(ballButton == 128) {
  9e:	1f 9b       	sbis	0x03, 7	; 3
  a0:	03 c0       	rjmp	.+6      	; 0xa8 <decode+0xe>
            *test = 1;
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <decode+0x16>
            break;
        }
        else if(strikeButton == 128) {
  a8:	87 ff       	sbrs	r24, 7
  aa:	f8 cf       	rjmp	.-16     	; 0x9c <decode+0x2>
            *test = 2;
  ac:	82 e0       	ldi	r24, 0x02	; 2
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	91 83       	std	Z+1, r25	; 0x01
  b2:	80 83       	st	Z, r24
        }
    }

    return *test;

}
  b4:	80 81       	ld	r24, Z
  b6:	91 81       	ldd	r25, Z+1	; 0x01
  b8:	08 95       	ret

000000ba <main>:

int decode (int *test);


int main (void)
{
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
  c2:	64 97       	sbiw	r28, 0x14	; 20
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	f8 94       	cli
  c8:	de bf       	out	0x3e, r29	; 62
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	cd bf       	out	0x3d, r28	; 61
    int digits[10];
    int balls = 0; 
    int strikes = 0;
    int *test;

    digits[0] = 0xC0;
  ce:	80 ec       	ldi	r24, 0xC0	; 192
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	9a 83       	std	Y+2, r25	; 0x02
  d4:	89 83       	std	Y+1, r24	; 0x01
    digits[1] = 0xF9;
  d6:	89 ef       	ldi	r24, 0xF9	; 249
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	9c 83       	std	Y+4, r25	; 0x04
  dc:	8b 83       	std	Y+3, r24	; 0x03
    digits[2] = 0xA4;
  de:	84 ea       	ldi	r24, 0xA4	; 164
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	9e 83       	std	Y+6, r25	; 0x06
  e4:	8d 83       	std	Y+5, r24	; 0x05
    digits[3] = 0xB0;
  e6:	80 eb       	ldi	r24, 0xB0	; 176
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	98 87       	std	Y+8, r25	; 0x08
  ec:	8f 83       	std	Y+7, r24	; 0x07
    digits[4] = 0x99;
  ee:	89 e9       	ldi	r24, 0x99	; 153
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	9a 87       	std	Y+10, r25	; 0x0a
  f4:	89 87       	std	Y+9, r24	; 0x09
    digits[5] = 0x92;
  f6:	82 e9       	ldi	r24, 0x92	; 146
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	9c 87       	std	Y+12, r25	; 0x0c
  fc:	8b 87       	std	Y+11, r24	; 0x0b
    digits[6] = 0x82;
  fe:	82 e8       	ldi	r24, 0x82	; 130
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	9e 87       	std	Y+14, r25	; 0x0e
 104:	8d 87       	std	Y+13, r24	; 0x0d
    digits[7] = 0xF8;
 106:	88 ef       	ldi	r24, 0xF8	; 248
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	98 8b       	std	Y+16, r25	; 0x10
 10c:	8f 87       	std	Y+15, r24	; 0x0f
    digits[8] = 0x80;
 10e:	80 e8       	ldi	r24, 0x80	; 128
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	9a 8b       	std	Y+18, r25	; 0x12
 114:	89 8b       	std	Y+17, r24	; 0x11
    digits[9] = 0x98;
 116:	88 e9       	ldi	r24, 0x98	; 152
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	9c 8b       	std	Y+20, r25	; 0x14
 11c:	8b 8b       	std	Y+19, r24	; 0x13
    digits[10] = 0xC1;
    
    DDRD = 0x7F; //set PORTD for output
 11e:	8f e7       	ldi	r24, 0x7F	; 127
 120:	8a b9       	out	0x0a, r24	; 10
    DDRB = 0x7F; //set PORTB for output
 122:	84 b9       	out	0x04, r24	; 4

int main (void)
{
    int digits[10];
    int balls = 0; 
    int strikes = 0;
 124:	ee 24       	eor	r14, r14
 126:	ff 24       	eor	r15, r15


int main (void)
{
    int digits[10];
    int balls = 0; 
 128:	cc 24       	eor	r12, r12
 12a:	dd 24       	eor	r13, r13
    DDRD = 0x7F; //set PORTD for output
    DDRB = 0x7F; //set PORTB for output

    while(1) {

        *test = decode(test); //test to see which button gets pressed
 12c:	00 e0       	ldi	r16, 0x00	; 0
 12e:	10 e0       	ldi	r17, 0x00	; 0
 130:	c8 01       	movw	r24, r16
 132:	0e 94 4d 00 	call	0x9a	; 0x9a <decode>
 136:	f8 01       	movw	r30, r16
 138:	91 83       	std	Z+1, r25	; 0x01
 13a:	80 83       	st	Z, r24

        if(*test == 1) {
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	91 05       	cpc	r25, r1
 140:	79 f4       	brne	.+30     	; 0x160 <main+0xa6>
            balls ++;
 142:	08 94       	sec
 144:	c1 1c       	adc	r12, r1
 146:	d1 1c       	adc	r13, r1
            PORTB = digits[balls];
 148:	f6 01       	movw	r30, r12
 14a:	ee 0f       	add	r30, r30
 14c:	ff 1f       	adc	r31, r31
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	8c 0f       	add	r24, r28
 154:	9d 1f       	adc	r25, r29
 156:	e8 0f       	add	r30, r24
 158:	f9 1f       	adc	r31, r25
 15a:	80 81       	ld	r24, Z
 15c:	85 b9       	out	0x05, r24	; 5
 15e:	11 c0       	rjmp	.+34     	; 0x182 <main+0xc8>
        }
        else if(*test == 2) {
 160:	82 30       	cpi	r24, 0x02	; 2
 162:	91 05       	cpc	r25, r1
 164:	71 f4       	brne	.+28     	; 0x182 <main+0xc8>
            strikes ++;
 166:	08 94       	sec
 168:	e1 1c       	adc	r14, r1
 16a:	f1 1c       	adc	r15, r1
            PORTD = digits[strikes];
 16c:	f7 01       	movw	r30, r14
 16e:	ee 0f       	add	r30, r30
 170:	ff 1f       	adc	r31, r31
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	8c 0f       	add	r24, r28
 178:	9d 1f       	adc	r25, r29
 17a:	e8 0f       	add	r30, r24
 17c:	f9 1f       	adc	r31, r25
 17e:	80 81       	ld	r24, Z
 180:	8b b9       	out	0x0b, r24	; 11
        }

        if(balls == 4 || strikes == 3) {
 182:	94 e0       	ldi	r25, 0x04	; 4
 184:	c9 16       	cp	r12, r25
 186:	d1 04       	cpc	r13, r1
 188:	21 f0       	breq	.+8      	; 0x192 <main+0xd8>
 18a:	e3 e0       	ldi	r30, 0x03	; 3
 18c:	ee 16       	cp	r14, r30
 18e:	f1 04       	cpc	r15, r1
 190:	69 f6       	brne	.-102    	; 0x12c <main+0x72>
            balls = 0;
            PORTB = digits[balls];
 192:	89 81       	ldd	r24, Y+1	; 0x01
 194:	85 b9       	out	0x05, r24	; 5

            strikes = 0;
            PORTD = digits[strikes];
 196:	89 81       	ldd	r24, Y+1	; 0x01
 198:	8b b9       	out	0x0b, r24	; 11
 19a:	c4 cf       	rjmp	.-120    	; 0x124 <main+0x6a>

0000019c <_exit>:
 19c:	f8 94       	cli

0000019e <__stop_program>:
 19e:	ff cf       	rjmp	.-2      	; 0x19e <__stop_program>
