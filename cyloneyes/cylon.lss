
cylon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000c48  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000000c7  00000000  00000000  00000e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000f2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000013b  00000000  00000000  00000f4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000c5  00000000  00000000  00001086  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000f0  00000000  00000000  0000114b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  0000123c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000a8  00000000  00000000  00001260  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000bf  00000000  00000000  00001308  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  000013c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e6 ec       	ldi	r30, 0xC6	; 198
  70:	f1 e0       	ldi	r31, 0x01	; 1
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a0 30       	cpi	r26, 0x00	; 0
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	11 e0       	ldi	r17, 0x01	; 1
  80:	a0 e0       	ldi	r26, 0x00	; 0
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a0 30       	cpi	r26, 0x00	; 0
  8a:	b1 07       	cpc	r27, r17
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  92:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <main>:

    //declare polarity variable
    unsigned char polarity = 0;
    
    //init port pins
    DDRB = 0x00; //set port B pins for input
  9a:	14 b8       	out	0x04, r1	; 4
    DDRD = 0xFF; //set port D pins for output
  9c:	8f ef       	ldi	r24, 0xFF	; 255
  9e:	8a b9       	out	0x0a, r24	; 10
            if(polarity) PORTD = ~i;
            else PORTD = i;
            _delay_loop_2(delay_count);
        }

        for(int i = 128; i > 1; i -= i/2)
  a0:	c2 e0       	ldi	r28, 0x02	; 2
  a2:	d0 e0       	ldi	r29, 0x00	; 0
    DDRD = 0xFF; //set port D pins for output

    while(1)
    {
        // read the switches
        increase = PINB;
  a4:	83 b1       	in	r24, 0x03	; 3
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	a0 e0       	ldi	r26, 0x00	; 0
  aa:	b0 e0       	ldi	r27, 0x00	; 0
        
        //set the polarity
        if(increase > 127) //aka pin 1 is set on
  ac:	80 38       	cpi	r24, 0x80	; 128
  ae:	91 05       	cpc	r25, r1
  b0:	a1 05       	cpc	r26, r1
  b2:	b1 05       	cpc	r27, r1
  b4:	30 f0       	brcs	.+12     	; 0xc2 <main+0x28>
        {
            increase -= 127;
  b6:	8f 57       	subi	r24, 0x7F	; 127
  b8:	90 40       	sbci	r25, 0x00	; 0
  ba:	a0 40       	sbci	r26, 0x00	; 0
  bc:	b0 40       	sbci	r27, 0x00	; 0
            polarity = 1;
  be:	11 e0       	ldi	r17, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <main+0x2a>
        }
        else polarity = 0;
  c2:	10 e0       	ldi	r17, 0x00	; 0

        delay_count = 5000 + (increase * 400); //delay_count cannot exceed 65535
  c4:	bc 01       	movw	r22, r24
  c6:	cd 01       	movw	r24, r26
  c8:	20 e9       	ldi	r18, 0x90	; 144
  ca:	31 e0       	ldi	r19, 0x01	; 1
  cc:	40 e0       	ldi	r20, 0x00	; 0
  ce:	50 e0       	ldi	r21, 0x00	; 0
  d0:	0e 94 9b 00 	call	0x136	; 0x136 <__mulsi3>
  d4:	dc 01       	movw	r26, r24
  d6:	cb 01       	movw	r24, r22
  d8:	88 57       	subi	r24, 0x78	; 120
  da:	9c 4e       	sbci	r25, 0xEC	; 236
  dc:	af 4f       	sbci	r26, 0xFF	; 255
  de:	bf 4f       	sbci	r27, 0xFF	; 255
  e0:	28 e0       	ldi	r18, 0x08	; 8
  e2:	30 e0       	ldi	r19, 0x00	; 0

        //scroll the LEDs
        for(int i = 1; i <=128; i = i*2)
  e4:	41 e0       	ldi	r20, 0x01	; 1
  e6:	50 e0       	ldi	r21, 0x00	; 0
        {
            if(polarity) PORTD = ~i;
            else PORTD = i;
            _delay_loop_2(delay_count);
  e8:	fc 01       	movw	r30, r24
        delay_count = 5000 + (increase * 400); //delay_count cannot exceed 65535

        //scroll the LEDs
        for(int i = 1; i <=128; i = i*2)
        {
            if(polarity) PORTD = ~i;
  ea:	11 23       	and	r17, r17
  ec:	21 f0       	breq	.+8      	; 0xf6 <main+0x5c>
  ee:	84 2f       	mov	r24, r20
  f0:	80 95       	com	r24
  f2:	8b b9       	out	0x0b, r24	; 11
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <main+0x5e>
            else PORTD = i;
  f6:	4b b9       	out	0x0b, r20	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  f8:	cf 01       	movw	r24, r30
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <main+0x60>
        else polarity = 0;

        delay_count = 5000 + (increase * 400); //delay_count cannot exceed 65535

        //scroll the LEDs
        for(int i = 1; i <=128; i = i*2)
  fe:	44 0f       	add	r20, r20
 100:	55 1f       	adc	r21, r21
 102:	21 50       	subi	r18, 0x01	; 1
 104:	30 40       	sbci	r19, 0x00	; 0
 106:	89 f7       	brne	.-30     	; 0xea <main+0x50>
 108:	20 e8       	ldi	r18, 0x80	; 128
 10a:	30 e0       	ldi	r19, 0x00	; 0
            _delay_loop_2(delay_count);
        }

        for(int i = 128; i > 1; i -= i/2)
        {
            if(polarity) PORTD = ~i;
 10c:	11 23       	and	r17, r17
 10e:	21 f0       	breq	.+8      	; 0x118 <main+0x7e>
 110:	82 2f       	mov	r24, r18
 112:	80 95       	com	r24
 114:	8b b9       	out	0x0b, r24	; 11
 116:	01 c0       	rjmp	.+2      	; 0x11a <main+0x80>
            else PORTD = i;
 118:	2b b9       	out	0x0b, r18	; 11
 11a:	cf 01       	movw	r24, r30
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <main+0x82>
            if(polarity) PORTD = ~i;
            else PORTD = i;
            _delay_loop_2(delay_count);
        }

        for(int i = 128; i > 1; i -= i/2)
 120:	c9 01       	movw	r24, r18
 122:	be 01       	movw	r22, r28
 124:	0e 94 ba 00 	call	0x174	; 0x174 <__divmodhi4>
 128:	26 1b       	sub	r18, r22
 12a:	37 0b       	sbc	r19, r23
 12c:	22 30       	cpi	r18, 0x02	; 2
 12e:	31 05       	cpc	r19, r1
 130:	0c f4       	brge	.+2      	; 0x134 <main+0x9a>
 132:	b8 cf       	rjmp	.-144    	; 0xa4 <main+0xa>
 134:	eb cf       	rjmp	.-42     	; 0x10c <main+0x72>

00000136 <__mulsi3>:
 136:	62 9f       	mul	r22, r18
 138:	d0 01       	movw	r26, r0
 13a:	73 9f       	mul	r23, r19
 13c:	f0 01       	movw	r30, r0
 13e:	82 9f       	mul	r24, r18
 140:	e0 0d       	add	r30, r0
 142:	f1 1d       	adc	r31, r1
 144:	64 9f       	mul	r22, r20
 146:	e0 0d       	add	r30, r0
 148:	f1 1d       	adc	r31, r1
 14a:	92 9f       	mul	r25, r18
 14c:	f0 0d       	add	r31, r0
 14e:	83 9f       	mul	r24, r19
 150:	f0 0d       	add	r31, r0
 152:	74 9f       	mul	r23, r20
 154:	f0 0d       	add	r31, r0
 156:	65 9f       	mul	r22, r21
 158:	f0 0d       	add	r31, r0
 15a:	99 27       	eor	r25, r25
 15c:	72 9f       	mul	r23, r18
 15e:	b0 0d       	add	r27, r0
 160:	e1 1d       	adc	r30, r1
 162:	f9 1f       	adc	r31, r25
 164:	63 9f       	mul	r22, r19
 166:	b0 0d       	add	r27, r0
 168:	e1 1d       	adc	r30, r1
 16a:	f9 1f       	adc	r31, r25
 16c:	bd 01       	movw	r22, r26
 16e:	cf 01       	movw	r24, r30
 170:	11 24       	eor	r1, r1
 172:	08 95       	ret

00000174 <__divmodhi4>:
 174:	97 fb       	bst	r25, 7
 176:	09 2e       	mov	r0, r25
 178:	07 26       	eor	r0, r23
 17a:	0a d0       	rcall	.+20     	; 0x190 <__divmodhi4_neg1>
 17c:	77 fd       	sbrc	r23, 7
 17e:	04 d0       	rcall	.+8      	; 0x188 <__divmodhi4_neg2>
 180:	0c d0       	rcall	.+24     	; 0x19a <__udivmodhi4>
 182:	06 d0       	rcall	.+12     	; 0x190 <__divmodhi4_neg1>
 184:	00 20       	and	r0, r0
 186:	1a f4       	brpl	.+6      	; 0x18e <__divmodhi4_exit>

00000188 <__divmodhi4_neg2>:
 188:	70 95       	com	r23
 18a:	61 95       	neg	r22
 18c:	7f 4f       	sbci	r23, 0xFF	; 255

0000018e <__divmodhi4_exit>:
 18e:	08 95       	ret

00000190 <__divmodhi4_neg1>:
 190:	f6 f7       	brtc	.-4      	; 0x18e <__divmodhi4_exit>
 192:	90 95       	com	r25
 194:	81 95       	neg	r24
 196:	9f 4f       	sbci	r25, 0xFF	; 255
 198:	08 95       	ret

0000019a <__udivmodhi4>:
 19a:	aa 1b       	sub	r26, r26
 19c:	bb 1b       	sub	r27, r27
 19e:	51 e1       	ldi	r21, 0x11	; 17
 1a0:	07 c0       	rjmp	.+14     	; 0x1b0 <__udivmodhi4_ep>

000001a2 <__udivmodhi4_loop>:
 1a2:	aa 1f       	adc	r26, r26
 1a4:	bb 1f       	adc	r27, r27
 1a6:	a6 17       	cp	r26, r22
 1a8:	b7 07       	cpc	r27, r23
 1aa:	10 f0       	brcs	.+4      	; 0x1b0 <__udivmodhi4_ep>
 1ac:	a6 1b       	sub	r26, r22
 1ae:	b7 0b       	sbc	r27, r23

000001b0 <__udivmodhi4_ep>:
 1b0:	88 1f       	adc	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	5a 95       	dec	r21
 1b6:	a9 f7       	brne	.-22     	; 0x1a2 <__udivmodhi4_loop>
 1b8:	80 95       	com	r24
 1ba:	90 95       	com	r25
 1bc:	bc 01       	movw	r22, r24
 1be:	cd 01       	movw	r24, r26
 1c0:	08 95       	ret

000001c2 <_exit>:
 1c2:	f8 94       	cli

000001c4 <__stop_program>:
 1c4:	ff cf       	rjmp	.-2      	; 0x1c4 <__stop_program>
