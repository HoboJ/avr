   1               		.file	"cylon.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.global __do_copy_data
   8               		.global __do_clear_bss
   9               		.text
  10               	.Ltext0:
  11               		.section	.text.startup,"ax",@progbits
  12               	.global	main
  14               	main:
  15               	.LFB4:
  16               		.file 1 "cylon.c"
   1:cylon.c       **** /* cyloneyes.c
   2:cylon.c       ****  *
   3:cylon.c       ****  * Trevor Hennessy
   4:cylon.c       ****  * Description: Blinks back and forth
   5:cylon.c       ****  */
   6:cylon.c       **** 
   7:cylon.c       **** #include <avr/io.h>
   8:cylon.c       **** #define F_CPU 1000000UL
   9:cylon.c       **** #include <util/delay.h>
  10:cylon.c       **** 
  11:cylon.c       **** int main (void)
  12:cylon.c       **** {
  17               		.loc 1 12 0
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22               	.LVL0:
  13:cylon.c       ****     //declare and initialize the scroll delay_count
  14:cylon.c       ****     unsigned long delay_count = 10000;
  15:cylon.c       **** 
  16:cylon.c       ****     //declare speed increase variable
  17:cylon.c       ****     unsigned long increase = 0;
  18:cylon.c       **** 
  19:cylon.c       ****     //declare polarity variable
  20:cylon.c       ****     unsigned char polarity = 0;
  21:cylon.c       ****     
  22:cylon.c       ****     //init port pins
  23:cylon.c       ****     DDRB = 0x00; //set port B pins for input
  23               		.loc 1 23 0
  24 0000 14B8      		out 36-0x20,__zero_reg__
  24:cylon.c       ****     DDRD = 0xFF; //set port D pins for output
  25               		.loc 1 24 0
  26 0002 8FEF      		ldi r24,lo8(-1)
  27 0004 8AB9      		out 42-0x20,r24
  28               	.LBB20:
  29               	.LBB21:
  30               	.LBB22:
  31               	.LBB23:
  32               	.LBB24:
  33               		.file 2 "/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h"
   1:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****    Copyright (c) 2007 Joerg Wunsch
   3:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****    All rights reserved.
   4:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 
   5:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 
   8:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 
  11:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****      the documentation and/or other materials provided with the
  14:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****      distribution.
  15:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 
  16:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****      contributors may be used to endorse or promote products derived
  18:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****      from this software without specific prior written permission.
  19:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 
  20:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 
  32:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** /* $Id: delay_basic.h 2143 2010-06-08 21:19:51Z joerg_wunsch $ */
  33:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 
  34:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** #ifndef _UTIL_DELAY_BASIC_H_
  35:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** #define _UTIL_DELAY_BASIC_H_ 1
  36:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 
  37:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** #include <inttypes.h>
  38:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 
  39:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** #if !defined(__DOXYGEN__)
  40:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** static inline void _delay_loop_1(uint8_t __count) __attribute__((always_inline));
  41:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** static inline void _delay_loop_2(uint16_t __count) __attribute__((always_inline));
  42:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** #endif
  43:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 
  44:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** /** \file */
  45:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** /** \defgroup util_delay_basic <util/delay_basic.h>: Basic busy-wait delay loops
  46:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     \code
  47:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     #include <util/delay_basic.h>
  48:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     \endcode
  49:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 
  50:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     The functions in this header file implement simple delay loops
  51:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     that perform a busy-waiting.  They are typically used to
  52:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     facilitate short delays in the program execution.  They are
  53:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     implemented as count-down loops with a well-known CPU cycle
  54:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     count per loop iteration.  As such, no other processing can
  55:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     occur simultaneously.  It should be kept in mind that the
  56:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     functions described here do not disable interrupts.
  57:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 
  58:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     In general, for long delays, the use of hardware timers is
  59:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     much preferrable, as they free the CPU, and allow for
  60:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     concurrent processing of other events while the timer is
  61:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     running.  However, in particular for very short delays, the
  62:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     overhead of setting up a hardware timer is too much compared
  63:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     to the overall delay time.
  64:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 
  65:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     Two inline functions are provided for the actual delay algorithms.
  66:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 
  67:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** */
  68:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 
  69:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  70:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 
  71:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     Delay loop using an 8-bit counter \c __count, so up to 256
  72:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 256 would have to be passed
  73:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     as 0.)  The loop executes three CPU cycles per iteration, not
  74:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     including the overhead the compiler needs to setup the counter
  75:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     register.
  76:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 
  77:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to 768 microseconds
  78:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     can be achieved.
  79:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** */
  80:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** void
  81:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** _delay_loop_1(uint8_t __count)
  82:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** {
  83:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 	__asm__ volatile (
  84:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 		"1: dec %0" "\n\t"
  85:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 		"brne 1b"
  86:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 		: "=r" (__count)
  87:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 		: "0" (__count)
  88:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 	);
  89:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** }
  90:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 
  91:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  92:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 
  93:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     Delay loop using a 16-bit counter \c __count, so up to 65536
  94:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 65536 would have to be
  95:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     passed as 0.)  The loop executes four CPU cycles per iteration,
  96:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     not including the overhead the compiler requires to setup the
  97:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     counter register pair.
  98:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 
  99:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to about 262.1
 100:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****     milliseconds can be achieved.
 101:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h ****  */
 102:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** void
 103:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** _delay_loop_2(uint16_t __count)
 104:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** {
 105:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h **** 	__asm__ volatile (
  34               		.loc 2 105 0
  35 0006 29E1      		ldi r18,lo8(25)
  36 0008 422E      		mov r4,r18
  37 000a 512C      		mov r5,__zero_reg__
  38               	.LBE24:
  39               	.LBE23:
  40               	.LBE22:
  41               	.LBE21:
  42               	.LBE20:
  43               	.LBB33:
  25:cylon.c       **** 
  26:cylon.c       ****     while(1)
  27:cylon.c       ****     {
  28:cylon.c       ****         // read the switches
  29:cylon.c       ****         increase = PINB;
  30:cylon.c       ****         
  31:cylon.c       ****         //set the polarity
  32:cylon.c       ****         if(increase > 127) //aka pin 1 is set on
  33:cylon.c       ****         {
  34:cylon.c       ****             increase -= 127;
  35:cylon.c       ****             polarity = 1;
  36:cylon.c       ****         }
  37:cylon.c       ****         else polarity = 0;
  38:cylon.c       **** 
  39:cylon.c       ****         delay_count = 50 + (increase * 10); //delay_count cannot exceed 65535
  40:cylon.c       **** 
  41:cylon.c       ****         //scroll the LEDs
  42:cylon.c       ****         for(int i = 1; i <=128; i = i*2)
  43:cylon.c       ****         {
  44:cylon.c       ****             if(polarity) PORTD = ~i;
  45:cylon.c       ****             else PORTD = i;
  46:cylon.c       ****             _delay_ms(delay_count);
  47:cylon.c       ****         }
  48:cylon.c       **** 
  49:cylon.c       ****         for(int i = 128; i > 1; i -= i/2)
  44               		.loc 1 49 0
  45 000c 32E0      		ldi r19,lo8(2)
  46 000e 232E      		mov r2,r19
  47 0010 312C      		mov r3,__zero_reg__
  48               	.LVL1:
  49               	.L21:
  50               	.LBE33:
  29:cylon.c       ****         increase = PINB;
  51               		.loc 1 29 0
  52 0012 83B1      		in r24,35-0x20
  53 0014 90E0      		ldi r25,lo8(0)
  54 0016 A0E0      		ldi r26,lo8(0)
  55 0018 B0E0      		ldi r27,hi8(0)
  56               	.LVL2:
  32:cylon.c       ****         if(increase > 127) //aka pin 1 is set on
  57               		.loc 1 32 0
  58 001a 8038      		cpi r24,lo8(128)
  59 001c 9105      		cpc r25,__zero_reg__
  60 001e A105      		cpc r26,__zero_reg__
  61 0020 B105      		cpc r27,__zero_reg__
  62 0022 00F0      		brlo .L22
  34:cylon.c       ****             increase -= 127;
  63               		.loc 1 34 0
  64 0024 8F57      		subi r24,lo8(-(-127))
  65 0026 9040      		sbci r25,hi8(-(-127))
  66 0028 A040      		sbci r26,hlo8(-(-127))
  67 002a B040      		sbci r27,hhi8(-(-127))
  68               	.LVL3:
  35:cylon.c       ****             polarity = 1;
  69               		.loc 1 35 0
  70 002c 7724      		clr r7
  71 002e 7394      		inc r7
  72 0030 00C0      		rjmp .L2
  73               	.LVL4:
  74               	.L22:
  37:cylon.c       ****         else polarity = 0;
  75               		.loc 1 37 0
  76 0032 7724      		clr r7
  77               	.L2:
  78               	.LVL5:
  39:cylon.c       ****         delay_count = 50 + (increase * 10); //delay_count cannot exceed 65535
  79               		.loc 1 39 0
  80 0034 BC01      		movw r22,r24
  81 0036 CD01      		movw r24,r26
  82 0038 2AE0      		ldi r18,lo8(10)
  83 003a 30E0      		ldi r19,hi8(10)
  84 003c 40E0      		ldi r20,hlo8(10)
  85 003e 50E0      		ldi r21,hhi8(10)
  86 0040 0E94 0000 		call __mulsi3
  87 0044 6E5C      		subi r22,lo8(-(50))
  88 0046 7F4F      		sbci r23,hi8(-(50))
  89 0048 8F4F      		sbci r24,hlo8(-(50))
  90 004a 9F4F      		sbci r25,hhi8(-(50))
  91               	.LBB40:
  46:cylon.c       ****             _delay_ms(delay_count);
  92               		.loc 1 46 0
  93 004c 0E94 0000 		call __floatunsisf
  94               	.LVL6:
  95 0050 4B01      		movw r8,r22
  96 0052 5C01      		movw r10,r24
  97               	.LBB31:
  98               	.LBB29:
  99               		.file 3 "/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h"
   1:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 
   6:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 
   9:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 
  12:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****      distribution.
  16:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 
  17:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 
  21:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 
  33:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** /* $Id: delay.h.in 2103 2010-03-17 05:16:10Z joerg_wunsch $ */
  34:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 
  35:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 
  38:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 0
  40:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** #endif
  41:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 
  42:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 
  45:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** /** \file */
  46:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  47:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     \code
  48:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  49:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  50:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     #include <util/delay.h>
  51:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     \endcode
  52:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 
  53:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  54:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  55:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  56:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     used.
  57:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 
  58:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  59:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  60:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  61:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  62:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  63:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  64:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  65:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  66:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 
  67:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  68:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  69:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  70:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  71:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  72:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  73:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  74:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     routines linked into the application.
  75:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 
  76:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  77:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  78:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  79:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 
  80:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** */
  81:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 
  82:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  83:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  84:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  85:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** #endif
  86:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 
  87:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** #ifndef F_CPU
  88:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  89:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  90:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** # define F_CPU 1000000UL
  91:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** #endif
  92:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 
  93:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  94:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  95:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** #endif
  96:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 
  97:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** /**
  98:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****    \ingroup util_delay
  99:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 
 100:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 101:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 
 102:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 103:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 104:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 
 105:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 106:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 
 107:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 108:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 109:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 110:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 111:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 112:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h ****  */
 113:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** void
 114:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** _delay_ms(double __ms)
 115:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** {
 116:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 	uint16_t __ticks;
 117:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 	double __tmp = ((F_CPU) / 4e3) * __ms;
 100               		.loc 3 117 0
 101 0054 20E0      		ldi r18,lo8(0x437a0000)
 102 0056 30E0      		ldi r19,hi8(0x437a0000)
 103 0058 4AE7      		ldi r20,hlo8(0x437a0000)
 104 005a 53E4      		ldi r21,hhi8(0x437a0000)
 105 005c 0E94 0000 		call __mulsf3
 106 0060 162F      		mov r17,r22
 107 0062 072F      		mov r16,r23
 108 0064 F82E      		mov r15,r24
 109 0066 E92E      		mov r14,r25
 118:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__)
 119:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 120:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__tmp);
 121:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** #else
 122:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 	if (__tmp < 1.0)
 110               		.loc 3 122 0
 111 0068 A801      		movw r20,r16
 112 006a 9701      		movw r18,r14
 113 006c 852F      		mov r24,r21
 114 006e 942F      		mov r25,r20
 115 0070 A32F      		mov r26,r19
 116 0072 B22F      		mov r27,r18
 117 0074 BC01      		movw r22,r24
 118 0076 CD01      		movw r24,r26
 119 0078 20E0      		ldi r18,lo8(0x3f800000)
 120 007a 30E0      		ldi r19,hi8(0x3f800000)
 121 007c 40E8      		ldi r20,hlo8(0x3f800000)
 122 007e 5FE3      		ldi r21,hhi8(0x3f800000)
 123 0080 0E94 0000 		call __ltsf2
 124 0084 D82E      		mov r13,r24
 125 0086 DD1C      		rol r13
 126 0088 DD24      		clr r13
 127 008a DD1C      		rol r13
 123:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 		__ticks = 1;
 124:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 	else if (__tmp > 65535)
 128               		.loc 3 124 0
 129 008c CC24      		clr r12
 130 008e C394      		inc r12
 131 0090 A801      		movw r20,r16
 132 0092 9701      		movw r18,r14
 133 0094 852F      		mov r24,r21
 134 0096 942F      		mov r25,r20
 135 0098 A32F      		mov r26,r19
 136 009a B22F      		mov r27,r18
 137 009c BC01      		movw r22,r24
 138 009e CD01      		movw r24,r26
 139 00a0 20E0      		ldi r18,lo8(0x477fff00)
 140 00a2 3FEF      		ldi r19,hi8(0x477fff00)
 141 00a4 4FE7      		ldi r20,hlo8(0x477fff00)
 142 00a6 57E4      		ldi r21,hhi8(0x477fff00)
 143 00a8 0E94 0000 		call __gtsf2
 144 00ac 1816      		cp __zero_reg__,r24
 145 00ae 04F0      		brlt .L4
 146 00b0 CC24      		clr r12
 147               	.L4:
 125:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 	{
 126:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 127:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 128:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 		while(__ticks)
 129:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 		{
 130:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 			// wait 1/10 ms
 131:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 132:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 			__ticks --;
 133:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 		}
 134:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 		return;
 135:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 	}
 136:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 	else
 137:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 148               		.loc 3 137 0
 149 00b2 A801      		movw r20,r16
 150 00b4 9701      		movw r18,r14
 151 00b6 852F      		mov r24,r21
 152 00b8 902F      		mov r25,r16
 153 00ba A32F      		mov r26,r19
 154 00bc BE2D      		mov r27,r14
 155 00be BC01      		movw r22,r24
 156 00c0 CD01      		movw r24,r26
 157 00c2 0E94 0000 		call __fixunssfsi
 158 00c6 DD20      		tst r13
 159 00c8 01F0      		breq .L5
 160 00ca 91E0      		ldi r25,lo8(1)
 161 00cc E92E      		mov r14,r25
 162 00ce F12C      		mov r15,__zero_reg__
 163 00d0 00C0      		rjmp .L6
 164               	.L5:
 165 00d2 7B01      		movw r14,r22
 166               	.L6:
 167 00d4 C8E0      		ldi r28,lo8(8)
 168 00d6 D0E0      		ldi r29,hi8(8)
  42:cylon.c       ****         for(int i = 1; i <=128; i = i*2)
 169               		.loc 1 42 0
 170 00d8 01E0      		ldi r16,lo8(1)
 171 00da 10E0      		ldi r17,hi8(1)
 172               	.LVL7:
 173               	.L13:
 174               	.LBE29:
 175               	.LBE31:
  44:cylon.c       ****             if(polarity) PORTD = ~i;
 176               		.loc 1 44 0
 177 00dc 7720      		tst r7
 178 00de 01F0      		breq .L7
  44:cylon.c       ****             if(polarity) PORTD = ~i;
 179               		.loc 1 44 0 is_stmt 0 discriminator 1
 180 00e0 802F      		mov r24,r16
 181 00e2 8095      		com r24
 182 00e4 8BB9      		out 43-0x20,r24
 183 00e6 00C0      		rjmp .L8
 184               	.L7:
  45:cylon.c       ****             else PORTD = i;
 185               		.loc 1 45 0 is_stmt 1
 186 00e8 0BB9      		out 43-0x20,r16
 187               	.L8:
 188               	.LVL8:
 189               	.LBB32:
 190               	.LBB30:
 122:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 	if (__tmp < 1.0)
 191               		.loc 3 122 0
 192 00ea DD20      		tst r13
 193 00ec 01F4      		brne .L9
 124:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 	else if (__tmp > 65535)
 194               		.loc 3 124 0
 195 00ee CC20      		tst r12
 196 00f0 01F0      		breq .L9
 127:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 197               		.loc 3 127 0
 198 00f2 C501      		movw r24,r10
 199 00f4 B401      		movw r22,r8
 200 00f6 20E0      		ldi r18,lo8(0x41200000)
 201 00f8 30E0      		ldi r19,hi8(0x41200000)
 202 00fa 40E2      		ldi r20,hlo8(0x41200000)
 203 00fc 51E4      		ldi r21,hhi8(0x41200000)
 204 00fe 0E94 0000 		call __mulsf3
 205 0102 0E94 0000 		call __fixunssfsi
 206 0106 DC01      		movw r26,r24
 207 0108 CB01      		movw r24,r22
 208 010a 9C01      		movw r18,r24
 209               	.LVL9:
 210 010c 00C0      		rjmp .L10
 211               	.LVL10:
 212               	.L11:
 213               	.LBB26:
 214               	.LBB25:
 215               		.loc 2 105 0
 216 010e C201      		movw r24,r4
 217               	/* #APP */
 218               	 ;  105 "/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h" 1
 219 0110 0197      		1: sbiw r24,1
 220 0112 01F4      		brne 1b
 221               	 ;  0 "" 2
 222               	.LVL11:
 223               	/* #NOAPP */
 224               	.LBE25:
 225               	.LBE26:
 132:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 			__ticks --;
 226               		.loc 3 132 0
 227 0114 2150      		subi r18,lo8(-(-1))
 228 0116 3040      		sbci r19,hi8(-(-1))
 229               	.LVL12:
 230               	.L10:
 128:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 		while(__ticks)
 231               		.loc 3 128 0
 232 0118 2115      		cp r18,__zero_reg__
 233 011a 3105      		cpc r19,__zero_reg__
 234 011c 01F4      		brne .L11
 235 011e 00C0      		rjmp .L12
 236               	.LVL13:
 237               	.L9:
 238               	.LBB27:
 239               	.LBB28:
 240               		.loc 2 105 0
 241 0120 C701      		movw r24,r14
 242               	/* #APP */
 243               	 ;  105 "/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h" 1
 244 0122 0197      		1: sbiw r24,1
 245 0124 01F4      		brne 1b
 246               	 ;  0 "" 2
 247               	.LVL14:
 248               	/* #NOAPP */
 249               	.L12:
 250               	.LBE28:
 251               	.LBE27:
 252               	.LBE30:
 253               	.LBE32:
  42:cylon.c       ****         for(int i = 1; i <=128; i = i*2)
 254               		.loc 1 42 0
 255 0126 000F      		lsl r16
 256 0128 111F      		rol r17
 257               	.LVL15:
 258 012a 2197      		sbiw r28,1
 259 012c 01F4      		brne .L13
 260 012e 00E8      		ldi r16,lo8(128)
 261 0130 10E0      		ldi r17,hi8(128)
 262               	.LVL16:
 263               	.L20:
 264               	.LBE40:
 265               	.LBB41:
  50:cylon.c       ****         {
  51:cylon.c       ****             if(polarity) PORTD = ~i;
 266               		.loc 1 51 0
 267 0132 7720      		tst r7
 268 0134 01F0      		breq .L14
 269               		.loc 1 51 0 is_stmt 0 discriminator 1
 270 0136 802F      		mov r24,r16
 271 0138 8095      		com r24
 272 013a 8BB9      		out 43-0x20,r24
 273 013c 00C0      		rjmp .L15
 274               	.L14:
  52:cylon.c       ****             else PORTD = i;
 275               		.loc 1 52 0 is_stmt 1
 276 013e 0BB9      		out 43-0x20,r16
 277               	.L15:
 278               	.LVL17:
 279               	.LBB34:
 280               	.LBB35:
 122:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 	if (__tmp < 1.0)
 281               		.loc 3 122 0
 282 0140 DD20      		tst r13
 283 0142 01F4      		brne .L16
 124:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 	else if (__tmp > 65535)
 284               		.loc 3 124 0
 285 0144 CC20      		tst r12
 286 0146 01F0      		breq .L16
 127:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 287               		.loc 3 127 0
 288 0148 C501      		movw r24,r10
 289 014a B401      		movw r22,r8
 290 014c 20E0      		ldi r18,lo8(0x41200000)
 291 014e 30E0      		ldi r19,hi8(0x41200000)
 292 0150 40E2      		ldi r20,hlo8(0x41200000)
 293 0152 51E4      		ldi r21,hhi8(0x41200000)
 294 0154 0E94 0000 		call __mulsf3
 295 0158 0E94 0000 		call __fixunssfsi
 296               	.LVL18:
 297 015c 00C0      		rjmp .L17
 298               	.L18:
 299               	.LVL19:
 300               	.LBB36:
 301               	.LBB37:
 302               		.loc 2 105 0
 303 015e C201      		movw r24,r4
 304               	/* #APP */
 305               	 ;  105 "/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h" 1
 306 0160 0197      		1: sbiw r24,1
 307 0162 01F4      		brne 1b
 308               	 ;  0 "" 2
 309               	.LVL20:
 310               	/* #NOAPP */
 311               	.LBE37:
 312               	.LBE36:
 132:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 			__ticks --;
 313               		.loc 3 132 0
 314 0164 6150      		subi r22,lo8(-(-1))
 315 0166 7040      		sbci r23,hi8(-(-1))
 316               	.LVL21:
 317               	.L17:
 128:/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay.h **** 		while(__ticks)
 318               		.loc 3 128 0
 319 0168 6115      		cp r22,__zero_reg__
 320 016a 7105      		cpc r23,__zero_reg__
 321 016c 01F4      		brne .L18
 322 016e 00C0      		rjmp .L19
 323               	.LVL22:
 324               	.L16:
 325               	.LBB38:
 326               	.LBB39:
 327               		.loc 2 105 0
 328 0170 C701      		movw r24,r14
 329               	/* #APP */
 330               	 ;  105 "/usr/lib/gcc/avr/4.6.1/../../../../avr/include/util/delay_basic.h" 1
 331 0172 0197      		1: sbiw r24,1
 332 0174 01F4      		brne 1b
 333               	 ;  0 "" 2
 334               	.LVL23:
 335               	/* #NOAPP */
 336               	.L19:
 337               	.LBE39:
 338               	.LBE38:
 339               	.LBE35:
 340               	.LBE34:
  49:cylon.c       ****         for(int i = 128; i > 1; i -= i/2)
 341               		.loc 1 49 0
 342 0176 C801      		movw r24,r16
 343 0178 B101      		movw r22,r2
 344 017a 0E94 0000 		call __divmodhi4
 345 017e 061B      		sub r16,r22
 346 0180 170B      		sbc r17,r23
 347               	.LVL24:
 348 0182 0230      		cpi r16,2
 349 0184 1105      		cpc r17,__zero_reg__
 350 0186 04F4      		brge .+2
 351 0188 00C0      		rjmp .L21
 352 018a 00C0      		rjmp .L20
 353               	.LBE41:
 354               	.LFE4:
 382               	.Letext0:
 383               		.file 4 "/usr/lib/gcc/avr/4.6.1/../../../../avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 cylon.c
     /tmp/ccfyxh7f.s:2      *ABS*:000000000000003f __SREG__
     /tmp/ccfyxh7f.s:3      *ABS*:000000000000003e __SP_H__
     /tmp/ccfyxh7f.s:4      *ABS*:000000000000003d __SP_L__
     /tmp/ccfyxh7f.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccfyxh7f.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccfyxh7f.s:14     .text.startup:0000000000000000 main

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
__mulsi3
__floatunsisf
__mulsf3
__ltsf2
__gtsf2
__fixunssfsi
__divmodhi4
